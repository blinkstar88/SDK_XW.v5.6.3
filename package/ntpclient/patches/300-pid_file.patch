--- a/ntpclient.c
+++ b/ntpclient.c
@@ -72,14 +72,16 @@ int debug=0;
 
 #ifdef ENABLE_REPLAY
 #define  REPLAY_OPTION   "r"
 #else
 #define  REPLAY_OPTION
 #endif
 
+#define PID_FILE "/var/run/ntpclient.pid"
+
 extern char *optarg;  /* according to man 2 getopt */
 
 #include <stdint.h>
 typedef uint32_t u32;  /* universal for C99 */
 /* typedef u_int32_t u32;   older Linux installs? */
 
 /* XXX fixme - non-automatic build configuration */
@@ -144,15 +146,17 @@ static int get_current_freq(void)
 {
 	/* OS dependent routine to get the current value of clock frequency.
 	 */
 #ifdef __linux__
 	struct timex txc;
 	txc.modes=0;
 	if (__adjtimex(&txc) < 0) {
-		perror("adjtimex"); exit(1);
+	    perror("adjtimex");
+            unlink(PID_FILE);
+	    exit(1);
 	}
 	return txc.freq;
 #else
 	return 0;
 #endif
 }
 
@@ -161,15 +165,17 @@ static int set_freq(int new_freq)
 	/* OS dependent routine to set a new value of clock frequency.
 	 */
 #ifdef __linux__
 	struct timex txc;
 	txc.modes = ADJ_FREQUENCY;
 	txc.freq = new_freq;
 	if (__adjtimex(&txc) < 0) {
-		perror("adjtimex"); exit(1);
+	    perror("adjtimex");
+            unlink(PID_FILE);
+	    exit(1);
 	}
 	return txc.freq;
 #else
 	return 0;
 #endif
 }
 
@@ -181,14 +187,15 @@ static void set_time(struct ntptime *new
 	struct timespec tv_set;
 	/* it would be even better to subtract half the slop */
 	tv_set.tv_sec  = new->coarse - JAN_1970;
 	/* divide xmttime.fine by 4294.967296 */
 	tv_set.tv_nsec = USEC(new->fine)*1000;
 	if (clock_settime(CLOCK_REALTIME, &tv_set)<0) {
 		perror("clock_settime");
+                unlink(PID_FILE);
 		exit(1);
 	}
 	if (debug) {
 		printf("set time to %lu.%.9lu\n", tv_set.tv_sec, tv_set.tv_nsec);
 	}
 #else
 	/* Traditional Linux way to set the system clock
@@ -196,14 +203,15 @@ static void set_time(struct ntptime *new
 	struct timeval tv_set;
 	/* it would be even better to subtract half the slop */
 	tv_set.tv_sec  = new->coarse - JAN_1970;
 	/* divide xmttime.fine by 4294.967296 */
 	tv_set.tv_usec = USEC(new->fine);
 	if (settimeofday(&tv_set,NULL)<0) {
 		perror("settimeofday");
+                unlink(PID_FILE);
 		exit(1);
 	}
 	if (debug) {
 		printf("set time to %lu.%.6lu\n", tv_set.tv_sec, tv_set.tv_usec);
 	}
 #endif
 }
@@ -466,14 +474,15 @@ static void setup_receive(int usd, unsig
 	memset(&sa_rcvr,0,sizeof sa_rcvr);
 	sa_rcvr.sin_family=AF_INET;
 	sa_rcvr.sin_addr.s_addr=htonl(interface);
 	sa_rcvr.sin_port=htons(port);
 	if(bind(usd,(struct sockaddr *) &sa_rcvr,sizeof sa_rcvr) == -1) {
 		perror("bind");
 		fprintf(stderr,"could not bind to udp port %d\n",port);
+                unlink(PID_FILE);
 		exit(1);
 	}
 	/* listen(usd,3); this isn't TCP; thanks Alexander! */
 }
 
 static int setup_transmit(int usd, char *host, short port, struct ntp_control *ntpc)
 {
@@ -481,15 +490,19 @@ static int setup_transmit(int usd, char 
 	memset(&sa_dest,0,sizeof sa_dest);
 	sa_dest.sin_family=AF_INET;
 	if (stuff_net_addr(&(sa_dest.sin_addr),host) != 0)
 		return 1;
 	memcpy(ntpc->serv_addr,&(sa_dest.sin_addr),4); /* XXX asumes IPv4 */
 	sa_dest.sin_port=htons(port);
 	if (connect(usd,(struct sockaddr *)&sa_dest,sizeof sa_dest)==-1)
-		{perror("connect"); exit(1);}
+	{
+	    perror("connect");
+            unlink(PID_FILE);
+	    exit(1);
+	}
 
 	return 0;
 }
 
 static void primary_loop(int usd, struct ntp_control *ntpc)
 {
 	fd_set fds;
@@ -719,28 +732,38 @@ int main(int argc, char *argv[]) {
 		ntpc.set_clock, ntpc.cross_check, ntpc.noexit);
 	}
 
 	/* Startup sequence */
 	if ((usd=socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP))==-1)
 		{perror ("socket");exit(1);}
 
+	if (ntpc.noexit || ntpc.probe_count) {
+	    FILE* pid_file = fopen(PID_FILE, "w");
+	    if (pid_file) {
+		fprintf(pid_file, "%d", getpid());
+                fclose(pid_file);
+	    }
+	}
 	setup_receive(usd, INADDR_ANY, udp_local_port);
 
 	for (retry_count=1;;retry_count++) {
 		ret=setup_transmit(usd, hostname, NTP_PORT, &ntpc);
 		if (ret==0 || ntpc.noexit==0 || (ntpc.probe_count>0 && retry_count>=ntpc.probe_count))
 			break;
 
 		sleep(MIN_INTERVAL);
 	}
 
-	if (ret!=0)
+	if (ret!=0) {
+                unlink(PID_FILE);
 		exit(ret);
+	}
 
 	if (ntpc.probe_count>0)
 		ntpc.probe_count-=retry_count;
 
 	primary_loop(usd, &ntpc);
 
 	close(usd);
+        unlink(PID_FILE);
 	return 0;
 }
