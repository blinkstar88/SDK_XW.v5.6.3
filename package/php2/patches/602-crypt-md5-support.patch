--- a/src/crypt.c
+++ b/src/crypt.c
@@ -42,52 +42,63 @@
 /*
  * If mode is non-zero, a salt is expected.
  * If mode is zero, a pseudo-random salt will be selected.
  */
 void Crypt(int mode) {
 #ifdef HAVE_CRYPT
 	Stack *s;
-	char salt[8];
+	char salt[13];
 	char *enc;
 	int i;
-	unsigned long seed[2];
 	const char *const seedchars =
 	    "VWXnopjk./0123YZabcdefghiIJKLMNOPQRST"
 	    "Ulm456789ABCDEFGHqrstuvwxyz";
 	
 	salt[0] = '\0';
 	if(mode) {
 		s = Pop();
 		if(!s) {
 			Error("Stack error in crypt");
 			return;
 		}
-		if(s->strval) strncpy(salt,s->strval,2);
+                if(s->strval) {
+                    StripSlashes(s->strval);
+                    //Check for MD5
+                    if (strlen(s->strval) > 2 &&
+                        s->strval[0]=='$' &&
+                        s->strval[1]=='1' &&
+                        s->strval[2]=='$')
+                        strncpy(salt,s->strval,12);
+                    else
+                        //Assuming DES
+                        strncpy(salt,s->strval,2);
+                }
 	} 
 	s = Pop();
 	if(!s) {
 		Error("Stack error in crypt");
 		return;
 	}
 	if(!salt[0]) {
-		seed[0] = time(NULL);
-		seed[1] = getpid() ^ (seed[0] >> 14 & 0x30000);
-		for (i = 0; i < 2; i++) {
-			salt[i] = seedchars[(seed[i/5] >> (i%5)*6) & 0x3f];
+                srand(time(NULL) * getpid());
+                salt[0] = '$';
+                salt[1] = '1'; //MD5 by default
+                salt[2] = '$';
+                for (i = 3; i < 11; i++) {
+			salt[i] = seedchars[rand() & 0x3f];
 		}
-		
-		salt[2] = '\0';
+		salt[11] = '$';
+		salt[12] = '\0';
 	}
 	StripSlashes(s->strval);
 	enc = (char *)crypt(s->strval,salt);
 #if DEBUG
 	Debug("Crypt returned [%s]\n",enc);
 #endif
-	Push(enc,STRING);	
-
+	Push(AddSlashes(enc,0), STRING);
 #else
 	Error("No crypt support compiled into this version");
 #endif
 }	
 
 static const char MINUS_ONE[] = "-1";
 static const char STR_TRUE[] = "1";
