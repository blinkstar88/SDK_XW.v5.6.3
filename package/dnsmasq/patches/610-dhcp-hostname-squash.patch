--- a/src/util.c
+++ b/src/util.c
@@ -92,14 +92,30 @@ unsigned short rand16(void)
   }
 
   return (unsigned short) out[--outleft];
 }
 
 #endif
 
+static int fixup_dhcpc_hostname(char *dest, int len)
+{
+    char *c;
+
+    if (!len)
+        return 0;
+
+    for (c = dest; (c[0] != 0) && (c - dest < len); c++) {
+
+        if (!isalnum(*c) && (*c != '-') && (*c != '_') && (*c != '.'))
+            *c = '-';
+
+    }
+    return 1;
+}
+
 static int check_name(char *in)
 {
   /* remove trailing . 
      also fail empty string and label > 63 chars */
   size_t dotgap = 0, l = strlen(in);
   char c;
   int nowhite = 0;
@@ -137,14 +153,17 @@ static int check_name(char *in)
 
 /* Hostnames have a more limited valid charset than domain names
    so check for legal char a-z A-Z 0-9 - _ 
    Note that this may receive a FQDN, so only check the first label 
    for the tighter criteria. */
 int legal_hostname(char *name)
 {
+#ifndef DO_NOT_FIXUP_DHCPC_HOSTNAME
+  return fixup_dhcpc_hostname(name, strlen(name));
+#else
   char c;
 
   if (!check_name(name))
     return 0;
 
   for (; (c = *name); name++)
     /* check for legal char a-z A-Z 0-9 - _ . */
@@ -159,14 +178,15 @@ int legal_hostname(char *name)
       if (c == '.')
 	return 1;
       
       return 0;
     }
   
   return 1;
+#endif
 }
   
 char *canonicalise(char *in, int *nomem)
 {
   char *ret = NULL;
 #if defined(LOCALEDIR) || defined(HAVE_IDN)
   int rc;
