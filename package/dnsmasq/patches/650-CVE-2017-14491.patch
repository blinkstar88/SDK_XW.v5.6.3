--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -40,15 +40,15 @@ int extract_name(struct dns_header *head
       if (!CHECK_LEN(header, p, plen, 1))
 	return 0;
       
       if ((l = *p++) == 0) 
 	/* end marker */
 	{
 	  /* check that there are the correct no of bytes after the name */
-	  if (!CHECK_LEN(header, p, plen, extrabytes))
+	  if (!CHECK_LEN(header, p1 ? p1 : p, plen, extrabytes))
 	    return 0;
 	  
 	  if (isExtract)
 	    {
 	      if (cp != (unsigned char *)name)
 		cp--;
 	      *cp = 0; /* terminate: lose final period */
@@ -689,14 +689,16 @@ static unsigned char *do_doctor(unsigned
 	  unsigned char *p1 = p;
 	  if (!CHECK_LEN(header, p1, qlen, rdlen))
 	    return 0;
 	  while ((p1 - p) < rdlen)
 	    {
 	      unsigned int i, len = *p1;
 	      unsigned char *p2 = p1;
+              if ((p1 + len - p) >= rdlen)
+                return 0; /* bad packet */
 	      /* make counted string zero-term  and sanitise */
 	      for (i = 0; i < len; i++)
 		{
 		  if (!isprint((int)*(p2+1)))
 		    break;
 		  
 		  *p2 = *(p2+1);
@@ -1070,15 +1072,18 @@ unsigned int extract_request(struct dns_
   return F_QUERY;
 }
 
 
 size_t setup_reply(struct dns_header *header, size_t qlen,
 		struct all_addr *addrp, unsigned int flags, unsigned long ttl)
 {
-  unsigned char *p = skip_questions(header, qlen);
+  unsigned char *p;
+
+  if (!(p = skip_questions(header, qlen)))
+    return 0;
   
   /* clear authoritative and truncated flags, set QR flag */
   header->hb3 = (header->hb3 & ~(HB3_AA | HB3_TC)) | HB3_QR;
   /* set RA flag */
   header->hb4 |= HB4_RA;
 
   header->nscount = htons(0);
