--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -954,15 +954,15 @@ size_t answer_auth(struct dns_header *he
 #endif
 
 /* util.c */
 void rand_init(void);
 unsigned short rand16(void);
 int legal_hostname(char *c);
 char *canonicalise(char *s, int *nomem);
-unsigned char *do_rfc1035_name(unsigned char *p, char *sval);
+unsigned char *do_rfc1035_name(unsigned char *p, char *sval, char *limit);
 void *safe_malloc(size_t size);
 void safe_pipe(int *fd, int read_noblock);
 void *whine_malloc(size_t size);
 int sa_len(union mysockaddr *addr);
 int sockaddr_isequal(union mysockaddr *s1, union mysockaddr *s2);
 int hostname_isequal(const char *a, const char *b);
 time_t dnsmasq_time(void);
--- a/src/option.c
+++ b/src/option.c
@@ -1199,15 +1199,15 @@ static int parse_dhcp_opt(char *errstr,
 		  if (p)
 		    {
 		      memcpy(newp, p, len);
 		      free(p);
 		    }
 		  
 		  p = newp;
-		  end = do_rfc1035_name(p + len, dom);
+		  end = do_rfc1035_name(p + len, dom, NULL);
 		  *end++ = 0;
 		  len = end - p;
 		  free(dom);
 
 		  arg = comma;
 		  comma = split(arg);
 		}
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -1195,38 +1195,54 @@ int check_for_bogus_wildcard(struct dns_
       if (!ADD_RDLEN(header, p, qlen, rdlen))
 	return 0;
     }
   
   return 0;
 }
 
+
 int add_resource_record(struct dns_header *header, char *limit, int *truncp, int nameoffset, unsigned char **pp, 
 			unsigned long ttl, int *offset, unsigned short type, unsigned short class, char *format, ...)
 {
   va_list ap;
   unsigned char *sav, *p = *pp;
   int j;
   unsigned short usval;
   long lval;
   char *sval;
+#define CHECK_LIMIT(size) \
+  if (limit && p + (size) > (unsigned char*)limit) \
+    { \
+      va_end(ap); \
+      goto truncated; \
+    }
 
   if (truncp && *truncp)
     return 0;
- 
+
   va_start(ap, format);   /* make ap point to 1st unamed argument */
-  
+
+  /* nameoffset (1 or 2) + type (2) + class (2) + ttl (4) + 0 (2) */
+  CHECK_LIMIT(12);
+
   if (nameoffset > 0)
     {
       PUTSHORT(nameoffset | 0xc000, p);
     }
   else
     {
       char *name = va_arg(ap, char *);
       if (name)
-	p = do_rfc1035_name(p, name);
+	p = do_rfc1035_name(p, name, limit);
+        if (!p)
+          {
+            va_end(ap);
+            goto truncated;
+          }
+
       if (nameoffset < 0)
 	{
 	  PUTSHORT(-nameoffset | 0xc000, p);
 	}
       else
 	*p++ = 0;
     }
@@ -1239,71 +1255,86 @@ int add_resource_record(struct dns_heade
   PUTSHORT(0, p);       /* Placeholder RDLength */
 
   for (; *format; format++)
     switch (*format)
       {
 #ifdef HAVE_IPV6
       case '6':
+        CHECK_LIMIT(IN6ADDRSZ);
 	sval = va_arg(ap, char *); 
 	memcpy(p, sval, IN6ADDRSZ);
 	p += IN6ADDRSZ;
 	break;
 #endif
 	
       case '4':
+	CHECK_LIMIT(INADDRSZ);
 	sval = va_arg(ap, char *); 
 	memcpy(p, sval, INADDRSZ);
 	p += INADDRSZ;
 	break;
 	
       case 's':
+	CHECK_LIMIT(2);
 	usval = va_arg(ap, int);
 	PUTSHORT(usval, p);
 	break;
 	
       case 'l':
+	CHECK_LIMIT(4);
 	lval = va_arg(ap, long);
 	PUTLONG(lval, p);
 	break;
 	
       case 'd':
-	/* get domain-name answer arg and store it in RDATA field */
-	if (offset)
-	  *offset = p - (unsigned char *)header;
-	p = do_rfc1035_name(p, va_arg(ap, char *));
-	*p++ = 0;
+        /* get domain-name answer arg and store it in RDATA field */
+        if (offset)
+          *offset = p - (unsigned char *)header;
+        p = do_rfc1035_name(p, va_arg(ap, char *), limit);
+        if (!p)
+          {
+            va_end(ap);
+            goto truncated;
+          }
+        CHECK_LIMIT(1);
+        *p++ = 0;
 	break;
 	
       case 't':
 	usval = va_arg(ap, int);
+	CHECK_LIMIT(usval);
 	sval = va_arg(ap, char *);
 	if (usval != 0)
 	  memcpy(p, sval, usval);
 	p += usval;
 	break;
 
       case 'z':
 	sval = va_arg(ap, char *);
 	usval = sval ? strlen(sval) : 0;
 	if (usval > 255)
 	  usval = 255;
+        CHECK_LIMIT(usval + 1);
 	*p++ = (unsigned char)usval;
 	memcpy(p, sval, usval);
 	p += usval;
 	break;
       }
 
+#undef CHECK_LIMIT
   va_end(ap);	/* clean up variable argument pointer */
   
   j = p - sav - 2;
-  PUTSHORT(j, sav);     /* Now, store real RDLength */
+ /* this has already been checked against limit before */
+ PUTSHORT(j, sav);     /* Now, store real RDLength */
   
   /* check for overflow of buffer */
   if (limit && ((unsigned char *)limit - p) < 0)
     {
+truncated:
       if (truncp)
 	*truncp = 1;
       return 0;
     }
   
   *pp = p;
   return 1;
--- a/src/rfc2131.c
+++ b/src/rfc2131.c
@@ -2324,17 +2324,17 @@ static void do_options(struct dhcp_conte
 	    {
 	      *(p++) = fqdn_flags & 0x0f; /* MBZ bits to zero */ 
 	      *(p++) = 255;
 	      *(p++) = 255;
 
 	      if (fqdn_flags & 0x04)
 		{
-		  p = do_rfc1035_name(p, hostname);
+		  p = do_rfc1035_name(p, hostname, NULL);
 		  if (domain)
-		    p = do_rfc1035_name(p, domain);
+		    p = do_rfc1035_name(p, domain, NULL);
 		  *p++ = 0;
 		}
 	      else
 		{
 		  memcpy(p, hostname, strlen(hostname));
 		  p += strlen(hostname);
 		  if (domain)
--- a/src/rfc3315.c
+++ b/src/rfc3315.c
@@ -1301,17 +1301,17 @@ struct dhcp_netid *add_options(struct st
       if (state->send_domain)
 	len += strlen(state->send_domain) + 1;
 
       o = new_opt6(OPTION6_FQDN);
       if ((p = expand(len + 3)))
 	{
 	  *(p++) = state->fqdn_flags;
-	  p = do_rfc1035_name(p, state->hostname);
+	  p = do_rfc1035_name(p, state->hostname, NULL);
 	  if (state->send_domain)
-	    p = do_rfc1035_name(p, state->send_domain);
+	    p = do_rfc1035_name(p, state->send_domain, NULL);
 	  *p = 0;
 	}
       end_opt6(o);
     }
 
 
   /* logging */
--- a/src/util.c
+++ b/src/util.c
@@ -218,23 +218,29 @@ char *canonicalise(char *in, int *nomem)
   else if (nomem)
     *nomem = 1;    
 #endif
 
   return ret;
 }
 
-unsigned char *do_rfc1035_name(unsigned char *p, char *sval)
+unsigned char *do_rfc1035_name(unsigned char *p, char *sval, char *limit)
 {
   int j;
   
   while (sval && *sval)
     {
+      if (limit && p + 1 > (unsigned char*)limit)
+        return p;
+
       unsigned char *cp = p++;
-      for (j = 0; *sval && (*sval != '.'); sval++, j++)
-	*p++ = *sval;
+      for (j = 0; *sval && (*sval != '.'); sval++, j++) {
+        if (limit && p + 1 > (unsigned char*)limit)
+            return p;
+        *p++ = *sval;
+      }
       *cp  = j;
       if (*sval)
 	sval++;
     }
   return p;
 }
 
