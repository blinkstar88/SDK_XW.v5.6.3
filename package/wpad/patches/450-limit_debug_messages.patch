--- a/src/utils/wpa_debug.c
+++ b/src/utils/wpa_debug.c
@@ -197,15 +197,15 @@ void wpa_debug_close_linux_tracing(void)
  *
  * This function is used to print conditional debugging and error messages. The
  * output may be directed to stdout, stderr, and/or syslog based on
  * configuration.
  *
  * Note: New line '\n' is added to the end of the text when printing to stdout.
  */
-void wpa_printf(int level, const char *fmt, ...)
+void _wpa_printf(int level, const char *fmt, ...)
 {
 	va_list ap;
 
 	va_start(ap, fmt);
 	if (level >= wpa_debug_level) {
 #ifdef CONFIG_ANDROID_LOG
 		__android_log_vprint(wpa_to_android_level(level),
@@ -244,16 +244,16 @@ void wpa_printf(int level, const char *f
 		fflush(wpa_debug_tracing_file);
 		va_end(ap);
 	}
 #endif /* CONFIG_DEBUG_LINUX_TRACING */
 }
 
 
-static void _wpa_hexdump(int level, const char *title, const u8 *buf,
-			 size_t len, int show)
+void _wpa_hexdump(int level, const char *title, const u8 *buf,
+		  size_t len, int show)
 {
 	size_t i;
 
 #ifdef CONFIG_DEBUG_LINUX_TRACING
 	if (wpa_debug_tracing_file != NULL) {
 		fprintf(wpa_debug_tracing_file,
 			WPAS_TRACE_PFX "%s - hexdump(len=%lu):",
@@ -371,28 +371,16 @@ static void _wpa_hexdump(int level, cons
 	printf("\n");
 #ifdef CONFIG_DEBUG_FILE
 	}
 #endif /* CONFIG_DEBUG_FILE */
 #endif /* CONFIG_ANDROID_LOG */
 }
 
-void wpa_hexdump(int level, const char *title, const void *buf, size_t len)
-{
-	_wpa_hexdump(level, title, buf, len, 1);
-}
-
-
-void wpa_hexdump_key(int level, const char *title, const void *buf, size_t len)
-{
-	_wpa_hexdump(level, title, buf, len, wpa_debug_show_keys);
-}
-
-
-static void _wpa_hexdump_ascii(int level, const char *title, const void *buf,
-			       size_t len, int show)
+void _wpa_hexdump_ascii(int level, const char *title, const void *buf,
+			size_t len, int show)
 {
 	size_t i, llen;
 	const u8 *pos = buf;
 	const size_t line_len = 16;
 
 #ifdef CONFIG_DEBUG_LINUX_TRACING
 	if (wpa_debug_tracing_file != NULL) {
@@ -491,28 +479,14 @@ static void _wpa_hexdump_ascii(int level
 #ifdef CONFIG_DEBUG_FILE
 	}
 #endif /* CONFIG_DEBUG_FILE */
 #endif /* CONFIG_ANDROID_LOG */
 }
 
 
-void wpa_hexdump_ascii(int level, const char *title, const void *buf,
-		       size_t len)
-{
-	_wpa_hexdump_ascii(level, title, buf, len, 1);
-}
-
-
-void wpa_hexdump_ascii_key(int level, const char *title, const void *buf,
-			   size_t len)
-{
-	_wpa_hexdump_ascii(level, title, buf, len, wpa_debug_show_keys);
-}
-
-
 #ifdef CONFIG_DEBUG_FILE
 static char *last_path = NULL;
 #endif /* CONFIG_DEBUG_FILE */
 
 int wpa_debug_reopen_file(void)
 {
 #ifdef CONFIG_DEBUG_FILE
@@ -588,15 +562,15 @@ static wpa_msg_get_ifname_func wpa_msg_i
 
 void wpa_msg_register_ifname_cb(wpa_msg_get_ifname_func func)
 {
 	wpa_msg_ifname_cb = func;
 }
 
 
-void wpa_msg(void *ctx, int level, const char *fmt, ...)
+void _wpa_msg(void *ctx, int level, const char *fmt, ...)
 {
 	va_list ap;
 	char *buf;
 	const int buflen = 2048;
 	int len;
 	char prefix[130];
 
@@ -622,15 +596,15 @@ void wpa_msg(void *ctx, int level, const
 	wpa_printf(level, "%s%s", prefix, buf);
 	if (wpa_msg_cb)
 		wpa_msg_cb(ctx, level, 0, buf, len);
 	os_free(buf);
 }
 
 
-void wpa_msg_ctrl(void *ctx, int level, const char *fmt, ...)
+void _wpa_msg_ctrl(void *ctx, int level, const char *fmt, ...)
 {
 	va_list ap;
 	char *buf;
 	const int buflen = 2048;
 	int len;
 
 	if (!wpa_msg_cb)
--- a/src/utils/wpa_debug.h
+++ b/src/utils/wpa_debug.h
@@ -43,14 +43,25 @@ static inline int wpa_debug_reopen_file(
 
 #else /* CONFIG_NO_STDOUT_DEBUG */
 
 int wpa_debug_open_file(const char *path);
 int wpa_debug_reopen_file(void);
 void wpa_debug_close_file(void);
 
+/* internal */
+void _wpa_hexdump(int level, const char *title, const u8 *buf,
+		  size_t len, int show);
+void _wpa_hexdump_ascii(int level, const char *title, const void *buf,
+			size_t len, int show);
+extern int wpa_debug_show_keys;
+
+#ifndef CONFIG_MSG_MIN_PRIORITY
+#define CONFIG_MSG_MIN_PRIORITY 0
+#endif
+
 /**
  * wpa_debug_printf_timestamp - Print timestamp for debug output
  *
  * This function prints a timestamp in seconds_from_1970.microsoconds
  * format if debug output has been configured to include timestamps in debug
  * messages.
  */
@@ -63,29 +74,41 @@ void wpa_debug_print_timestamp(void);
  *
  * This function is used to print conditional debugging and error messages. The
  * output may be directed to stdout, stderr, and/or syslog based on
  * configuration.
  *
  * Note: New line '\n' is added to the end of the text when printing to stdout.
  */
-void wpa_printf(int level, const char *fmt, ...)
+void _wpa_printf(int level, const char *fmt, ...)
 PRINTF_FORMAT(2, 3);
 
+#define wpa_printf(level, ...)						\
+	do {								\
+		if (level >= CONFIG_MSG_MIN_PRIORITY)			\
+			_wpa_printf(level, __VA_ARGS__);		\
+	} while(0)
+
 /**
  * wpa_hexdump - conditional hex dump
  * @level: priority level (MSG_*) of the message
  * @title: title of for the message
  * @buf: data buffer to be dumped
  * @len: length of the buf
  *
  * This function is used to print conditional debugging and error messages. The
  * output may be directed to stdout, stderr, and/or syslog based on
  * configuration. The contents of buf is printed out has hex dump.
  */
-void wpa_hexdump(int level, const char *title, const void *buf, size_t len);
+static inline void wpa_hexdump(int level, const char *title, const u8 *buf, size_t len)
+{
+	if (level < CONFIG_MSG_MIN_PRIORITY)
+		return;
+
+	_wpa_hexdump(level, title, buf, len, 1);
+}
 
 static inline void wpa_hexdump_buf(int level, const char *title,
 				   const struct wpabuf *buf)
 {
 	wpa_hexdump(level, title, buf ? wpabuf_head(buf) : NULL,
 		    buf ? wpabuf_len(buf) : 0);
 }
@@ -99,15 +122,21 @@ static inline void wpa_hexdump_buf(int l
  *
  * This function is used to print conditional debugging and error messages. The
  * output may be directed to stdout, stderr, and/or syslog based on
  * configuration. The contents of buf is printed out has hex dump. This works
  * like wpa_hexdump(), but by default, does not include secret keys (passwords,
  * etc.) in debug output.
  */
-void wpa_hexdump_key(int level, const char *title, const void *buf, size_t len);
+static inline void wpa_hexdump_key(int level, const char *title, const u8 *buf, size_t len)
+{
+	if (level < CONFIG_MSG_MIN_PRIORITY)
+		return;
+
+	_wpa_hexdump(level, title, buf, len, wpa_debug_show_keys);
+}
 
 static inline void wpa_hexdump_buf_key(int level, const char *title,
 				       const struct wpabuf *buf)
 {
 	wpa_hexdump_key(level, title, buf ? wpabuf_head(buf) : NULL,
 			buf ? wpabuf_len(buf) : 0);
 }
@@ -121,16 +150,22 @@ static inline void wpa_hexdump_buf_key(i
  *
  * This function is used to print conditional debugging and error messages. The
  * output may be directed to stdout, stderr, and/or syslog based on
  * configuration. The contents of buf is printed out has hex dump with both
  * the hex numbers and ASCII characters (for printable range) are shown. 16
  * bytes per line will be shown.
  */
-void wpa_hexdump_ascii(int level, const char *title, const void *buf,
-		       size_t len);
+static inline void wpa_hexdump_ascii(int level, const char *title,
+				     const u8 *buf, size_t len)
+{
+	if (level < CONFIG_MSG_MIN_PRIORITY)
+		return;
+
+	_wpa_hexdump_ascii(level, title, buf, len, 1);
+}
 
 /**
  * wpa_hexdump_ascii_key - conditional hex dump, hide keys
  * @level: priority level (MSG_*) of the message
  * @title: title of for the message
  * @buf: data buffer to be dumped
  * @len: length of the buf
@@ -138,16 +173,22 @@ void wpa_hexdump_ascii(int level, const
  * This function is used to print conditional debugging and error messages. The
  * output may be directed to stdout, stderr, and/or syslog based on
  * configuration. The contents of buf is printed out has hex dump with both
  * the hex numbers and ASCII characters (for printable range) are shown. 16
  * bytes per line will be shown. This works like wpa_hexdump_ascii(), but by
  * default, does not include secret keys (passwords, etc.) in debug output.
  */
-void wpa_hexdump_ascii_key(int level, const char *title, const void *buf,
-			   size_t len);
+static inline void wpa_hexdump_ascii_key(int level, const char *title,
+					 const u8 *buf, size_t len)
+{
+	if (level < CONFIG_MSG_MIN_PRIORITY)
+		return;
+
+	_wpa_hexdump_ascii(level, title, buf, len, wpa_debug_show_keys);
+}
 
 /*
  * wpa_dbg() behaves like wpa_msg(), but it can be removed from build to reduce
  * binary size. As such, it should be used with debugging messages that are not
  * needed in the control interface while wpa_msg() has to be used for anything
  * that needs to shown to control interface monitors.
  */
@@ -174,30 +215,40 @@ void wpa_hexdump_ascii_key(int level, co
  * This function is used to print conditional debugging and error messages. The
  * output may be directed to stdout, stderr, and/or syslog based on
  * configuration. This function is like wpa_printf(), but it also sends the
  * same message to all attached ctrl_iface monitors.
  *
  * Note: New line '\n' is added to the end of the text when printing to stdout.
  */
-void wpa_msg(void *ctx, int level, const char *fmt, ...) PRINTF_FORMAT(3, 4);
+void _wpa_msg(void *ctx, int level, const char *fmt, ...) PRINTF_FORMAT(3, 4);
+#define wpa_msg(ctx, level, ...)					\
+	do {								\
+		if (level >= CONFIG_MSG_MIN_PRIORITY)			\
+			_wpa_msg(ctx, level, __VA_ARGS__);		\
+	} while(0)
 
 /**
  * wpa_msg_ctrl - Conditional printf for ctrl_iface monitors
  * @ctx: Pointer to context data; this is the ctx variable registered
  *	with struct wpa_driver_ops::init()
  * @level: priority level (MSG_*) of the message
  * @fmt: printf format string, followed by optional arguments
  *
  * This function is used to print conditional debugging and error messages.
  * This function is like wpa_msg(), but it sends the output only to the
  * attached ctrl_iface monitors. In other words, it can be used for frequent
  * events that do not need to be sent to syslog.
  */
-void wpa_msg_ctrl(void *ctx, int level, const char *fmt, ...)
+void _wpa_msg_ctrl(void *ctx, int level, const char *fmt, ...)
 PRINTF_FORMAT(3, 4);
+#define wpa_msg_ctrl(ctx, level, ...)					\
+	do {								\
+		if (level >= CONFIG_MSG_MIN_PRIORITY)			\
+			_wpa_msg_ctrl(ctx, level, __VA_ARGS__);		\
+	} while(0)
 
 /**
  * wpa_msg_global - Global printf for ctrl_iface monitors
  * @ctx: Pointer to context data; this is the ctx variable registered
  *	with struct wpa_driver_ops::init()
  * @level: priority level (MSG_*) of the message
  * @fmt: printf format string, followed by optional arguments
