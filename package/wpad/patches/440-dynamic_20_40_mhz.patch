--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -2446,14 +2446,18 @@ static int hostapd_config_fill(struct ho
 			conf->ieee80211n = atoi(pos);
 		} else if (os_strcmp(buf, "ht_capab") == 0) {
 			if (hostapd_config_ht_capab(conf, pos) < 0) {
 				wpa_printf(MSG_ERROR, "Line %d: invalid "
 					   "ht_capab", line);
 				errors++;
 			}
+		} else if (os_strcmp(buf, "dynamic_ht40") == 0) {
+			conf->dynamic_ht40 = atoi(pos);
+			if (conf->dynamic_ht40 == 1)
+				conf->dynamic_ht40 = 1500;
 		} else if (os_strcmp(buf, "require_ht") == 0) {
 			conf->require_ht = atoi(pos);
 		} else if (os_strcmp(buf, "obss_interval") == 0) {
 			conf->obss_interval = atoi(pos);
 #endif /* CONFIG_IEEE80211N */
 #ifdef CONFIG_IEEE80211AC
 		} else if (os_strcmp(buf, "ieee80211ac") == 0) {
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -536,14 +536,15 @@ struct hostapd_config {
 
 	int ht_op_mode_fixed;
 	u16 ht_capab;
 	int noscan;
 	int ieee80211n;
 	int secondary_channel;
 	int require_ht;
+	int dynamic_ht40;
 	int obss_interval;
 	u32 vht_capab;
 	int ieee80211ac;
 	int require_vht;
 	u8 vht_oper_chwidth;
 	u8 vht_oper_centr_freq_seg0_idx;
 	u8 vht_oper_centr_freq_seg1_idx;
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -18,14 +18,15 @@
 #include "authsrv.h"
 #include "sta_info.h"
 #include "accounting.h"
 #include "ap_list.h"
 #include "beacon.h"
 #include "iapp.h"
 #include "ieee802_1x.h"
+#include "ieee802_11.h"
 #include "ieee802_11_auth.h"
 #include "vlan_init.h"
 #include "wpa_auth.h"
 #include "wps_hostapd.h"
 #include "hw_features.h"
 #include "wpa_auth_glue.h"
 #include "ap_drv_ops.h"
@@ -321,14 +322,15 @@ static void hostapd_cleanup(struct hosta
 	hostapd_free_hapd_data(hapd);
 }
 
 
 static void hostapd_cleanup_iface_partial(struct hostapd_iface *iface)
 {
 	wpa_printf(MSG_DEBUG, "%s(%p)", __func__, iface);
+	hostapd_deinit_ht(iface);
 	hostapd_free_hw_features(iface->hw_features, iface->num_hw_features);
 	iface->hw_features = NULL;
 	os_free(iface->current_rates);
 	iface->current_rates = NULL;
 	os_free(iface->basic_rates);
 	iface->basic_rates = NULL;
 	ap_list_deinit(iface);
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -323,14 +323,17 @@ struct hostapd_iface {
 
 	/* Number of HT associated stations 20 MHz */
 	int num_sta_ht_20mhz;
 
 	/* Overlapping BSS information */
 	int olbc_ht;
 
+	int force_20mhz;
+	struct os_time last_20mhz_trigger;
+
 	u16 ht_op_mode;
 
 	/* surveying helpers */
 
 	/* number of channels surveyed */
 	unsigned int chans_surveyed;
 
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -1525,14 +1525,17 @@ static void handle_beacon(struct hostapd
 	}
 
 	(void) ieee802_11_parse_elems(mgmt->u.beacon.variable,
 				      len - (IEEE80211_HDRLEN +
 					     sizeof(mgmt->u.beacon)), &elems,
 				      0);
 
+	if (!elems.ht_capabilities)
+		hostapd_trigger_20mhz(hapd->iface);
+
 	ap_list_process_beacon(hapd->iface, mgmt, &elems, fi);
 }
 
 
 #ifdef CONFIG_IEEE80211W
 
 static int hostapd_sa_query_action(struct hostapd_data *hapd,
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -78,8 +78,21 @@ u8 * hostapd_eid_adv_proto(struct hostap
 u8 * hostapd_eid_roaming_consortium(struct hostapd_data *hapd, u8 *eid);
 u8 * hostapd_eid_time_adv(struct hostapd_data *hapd, u8 *eid);
 u8 * hostapd_eid_time_zone(struct hostapd_data *hapd, u8 *eid);
 int hostapd_update_time_adv(struct hostapd_data *hapd);
 void hostapd_client_poll_ok(struct hostapd_data *hapd, const u8 *addr);
 u8 * hostapd_eid_bss_max_idle_period(struct hostapd_data *hapd, u8 *eid);
 
+#ifdef CONFIG_IEEE80211N
+void hostapd_trigger_20mhz(struct hostapd_iface *iface);
+void hostapd_deinit_ht(struct hostapd_iface *iface);
+
+#else
+static inline void hostapd_deinit_ht(struct hostapd_iface *iface)
+{
+}
+static inline void hostapd_trigger_20mhz(struct hostapd_iface *iface)
+{
+}
+#endif /* CONFIG_IEEE80211N */
+
 #endif /* IEEE802_11_H */
--- a/src/ap/ieee802_11_ht.c
+++ b/src/ap/ieee802_11_ht.c
@@ -9,17 +9,19 @@
 
 #include "utils/includes.h"
 
 #include "utils/common.h"
 #include "common/ieee802_11_defs.h"
 #include "hostapd.h"
 #include "ap_config.h"
+#include "ap_drv_ops.h"
 #include "sta_info.h"
 #include "beacon.h"
 #include "ieee802_11.h"
+#include "utils/eloop.h"
 
 
 u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid)
 {
 	struct ieee80211_ht_capabilities *cap;
 	u8 *pos = eid;
 
@@ -75,21 +77,25 @@ u8 * hostapd_eid_ht_operation(struct hos
 	*pos++ = sizeof(*oper);
 
 	oper = (struct ieee80211_ht_operation *) pos;
 	os_memset(oper, 0, sizeof(*oper));
 
 	oper->control_chan = hapd->iconf->channel;
 	oper->operation_mode = host_to_le16(hapd->iface->ht_op_mode);
+	if (hapd->iface->force_20mhz)
+		goto skip;
+
 	if (hapd->iconf->secondary_channel == 1)
 		oper->ht_param |= HT_INFO_HT_PARAM_SECONDARY_CHNL_ABOVE |
 			HT_INFO_HT_PARAM_REC_TRANS_CHNL_WIDTH;
 	if (hapd->iconf->secondary_channel == -1)
 		oper->ht_param |= HT_INFO_HT_PARAM_SECONDARY_CHNL_BELOW |
 			HT_INFO_HT_PARAM_REC_TRANS_CHNL_WIDTH;
 
+skip:
 	pos += sizeof(*oper);
 
 	return pos;
 }
 
 
 /*
@@ -275,7 +281,88 @@ void hostapd_get_ht_capab(struct hostapd
 	if (!(hapd->iconf->ht_capab & HT_CAP_INFO_RX_STBC_MASK))
 		cap &= ~HT_CAP_INFO_TX_STBC;
 	if (!(hapd->iconf->ht_capab & HT_CAP_INFO_TX_STBC))
 		cap &= ~HT_CAP_INFO_RX_STBC_MASK;
 
 	neg_ht_cap->ht_capabilities_info = host_to_le16(cap);
 }
+
+static void hostapd_set_force_20mhz(struct hostapd_iface *iface);
+
+static void hostapd_restore_40mhz(void *eloop_data, void *user_ctx)
+{
+	struct hostapd_iface *iface = eloop_data;
+	struct os_time time;
+	int timeout;
+
+	if (!iface->last_20mhz_trigger.sec)
+	    return;
+
+	os_get_time(&time);
+	timeout = iface->last_20mhz_trigger.sec + iface->conf->dynamic_ht40 -
+		  time.sec;
+
+	if (timeout > 0) {
+		eloop_register_timeout(timeout, 0, hostapd_restore_40mhz,
+				       iface, NULL);
+		return;
+	}
+
+	iface->last_20mhz_trigger.sec = 0;
+	iface->last_20mhz_trigger.usec = 0;
+
+	iface->force_20mhz = 0;
+	hostapd_set_force_20mhz(iface);
+}
+
+static void hostapd_set_force_20mhz(struct hostapd_iface *iface)
+{
+	int secondary_channel;
+	int i;
+
+	ieee802_11_set_beacons(iface);
+
+	for (i = 0; i < iface->num_bss; i++) {
+		struct hostapd_data *hapd = iface->bss[i];
+
+		if (iface->force_20mhz)
+			secondary_channel = 0;
+		else
+			secondary_channel = hapd->iconf->secondary_channel;
+
+		if (hostapd_set_freq(hapd, hapd->iconf->hw_mode, iface->freq,
+				     hapd->iconf->channel,
+				     hapd->iconf->ieee80211n,
+				     hapd->iconf->ieee80211ac,
+				     secondary_channel,
+				     hapd->iconf->vht_oper_chwidth,
+				     hapd->iconf->vht_oper_centr_freq_seg0_idx,
+				     hapd->iconf->vht_oper_centr_freq_seg1_idx)) {
+			wpa_printf(MSG_ERROR, "Could not set channel for "
+				   "kernel driver");
+		}
+	}
+}
+
+void hostapd_deinit_ht(struct hostapd_iface *iface)
+{
+	eloop_cancel_timeout(hostapd_restore_40mhz, iface, NULL);
+}
+
+void hostapd_trigger_20mhz(struct hostapd_iface *iface)
+{
+	if (!iface->conf->dynamic_ht40)
+		return;
+
+	if (!iface->force_20mhz) {
+		iface->force_20mhz = 1;
+		hostapd_set_force_20mhz(iface);
+	}
+
+	if (!iface->last_20mhz_trigger.sec) {
+		eloop_cancel_timeout(hostapd_restore_40mhz, iface, NULL);
+		eloop_register_timeout(iface->conf->dynamic_ht40, 0,
+				       hostapd_restore_40mhz, iface, NULL);
+	}
+
+	os_get_time(&iface->last_20mhz_trigger);
+}
