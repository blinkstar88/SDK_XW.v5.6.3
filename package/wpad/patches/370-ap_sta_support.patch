--- a/wpa_supplicant/Makefile
+++ b/wpa_supplicant/Makefile
@@ -9,14 +9,18 @@ endif
 export LIBDIR ?= /usr/local/lib/
 export BINDIR ?= /usr/local/sbin/
 PKG_CONFIG ?= pkg-config
 
 CFLAGS += -I$(abspath ../src)
 CFLAGS += -I$(abspath ../src/utils)
 
+ifdef MULTICALL
+CFLAGS += -DMULTICALL
+endif
+
 -include .config
 -include $(if $(MULTICALL),../hostapd/.config)
 
 ifdef CONFIG_TESTING_OPTIONS
 CFLAGS += -DCONFIG_TESTING_OPTIONS
 CONFIG_WPS_TESTING=y
 CONFIG_TDLS_TESTING=y
@@ -78,14 +82,16 @@ OBJS_p = wpa_passphrase.o
 OBJS_p += ../src/utils/common.o
 OBJS_p += ../src/utils/wpa_debug.o
 OBJS_p += ../src/utils/wpabuf.o
 OBJS_c = wpa_cli.o ../src/common/wpa_ctrl.o
 OBJS_c += ../src/utils/wpa_debug.o
 OBJS_c += ../src/utils/common.o
 
+OBJS += ../src/common/wpa_ctrl.o
+
 ifndef CONFIG_OS
 ifdef CONFIG_NATIVE_WINDOWS
 CONFIG_OS=win32
 else
 CONFIG_OS=unix
 endif
 endif
--- a/wpa_supplicant/bss.c
+++ b/wpa_supplicant/bss.c
@@ -7,14 +7,15 @@
  */
 
 #include "utils/includes.h"
 
 #include "utils/common.h"
 #include "utils/eloop.h"
 #include "common/ieee802_11_defs.h"
+#include "common/ieee802_11_common.h"
 #include "drivers/driver.h"
 #include "wpa_supplicant_i.h"
 #include "config.h"
 #include "notify.h"
 #include "scan.h"
 #include "bss.h"
 
@@ -241,24 +242,33 @@ static void calculate_update_time(const
 	update_time->usec -= usec;
 }
 
 
 static void wpa_bss_copy_res(struct wpa_bss *dst, struct wpa_scan_res *src,
 			     struct os_reltime *fetch_time)
 {
+	struct ieee80211_ht_capabilities *capab;
+	struct ieee802_11_elems elems;
+
 	dst->flags = src->flags;
 	os_memcpy(dst->bssid, src->bssid, ETH_ALEN);
 	dst->freq = src->freq;
 	dst->beacon_int = src->beacon_int;
 	dst->caps = src->caps;
 	dst->qual = src->qual;
 	dst->noise = src->noise;
 	dst->level = src->level;
 	dst->tsf = src->tsf;
 
+	memset(&elems, 0, sizeof(elems));
+	ieee802_11_parse_elems((u8 *) (src + 1), src->ie_len, &elems, 0);
+	capab = (struct ieee80211_ht_capabilities *) elems.ht_capabilities;
+	if (capab)
+		dst->ht_capab = le_to_host16(capab->ht_capabilities_info);
+
 	calculate_update_time(fetch_time, src->age, &dst->last_update);
 }
 
 
 static int wpa_bss_known(struct wpa_supplicant *wpa_s, struct wpa_bss *bss)
 {
 	struct wpa_ssid *ssid;
--- a/wpa_supplicant/bss.h
+++ b/wpa_supplicant/bss.h
@@ -65,14 +65,16 @@ struct wpa_bss {
 	u8 bssid[ETH_ALEN];
 	/** HESSID */
 	u8 hessid[ETH_ALEN];
 	/** SSID */
 	u8 ssid[32];
 	/** Length of SSID */
 	size_t ssid_len;
+	/** HT caapbilities */
+	u16 ht_capab;
 	/** Frequency of the channel in MHz (e.g., 2412 = channel 1) */
 	int freq;
 	/** Beacon interval in TUs (host byte order) */
 	u16 beacon_int;
 	/** Capability information field in host byte order */
 	u16 caps;
 	/** Signal quality */
--- a/wpa_supplicant/main.c
+++ b/wpa_supplicant/main.c
@@ -29,15 +29,15 @@ static void usage(void)
 	       "t"
 #ifdef CONFIG_DBUS
 	       "u"
 #endif /* CONFIG_DBUS */
 	       "vW] [-P<pid file>] "
 	       "[-g<global ctrl>] \\\n"
 	       "        [-G<group>] \\\n"
-	       "        -i<ifname> -c<config file> [-C<ctrl>] [-D<driver>] "
+	       "        -i<ifname> -c<config file> [-C<ctrl>] [-D<driver>] [-H<hostapd path>] "
 	       "[-p<driver_param>] \\\n"
 	       "        [-b<br_ifname>] [-e<entropy file>]"
 #ifdef CONFIG_DEBUG_FILE
 	       " [-f<debug file>]"
 #endif /* CONFIG_DEBUG_FILE */
 	       " \\\n"
 	       "        [-o<override driver>] [-O<override ctrl>] \\\n"
@@ -77,14 +77,15 @@ static void usage(void)
 #endif /* CONFIG_DEBUG_SYSLOG */
 #ifdef CONFIG_DEBUG_LINUX_TRACING
 	printf("  -T = record to Linux tracing in addition to logging\n");
 	printf("       (records all messages regardless of debug verbosity)\n");
 #endif /* CONFIG_DEBUG_LINUX_TRACING */
 	printf("  -t = include timestamp in debug messages\n"
 	       "  -h = show this help text\n"
+		   "  -H = connect to a hostapd instance to manage state changes\n"
 	       "  -L = show license (BSD)\n"
 	       "  -o = override driver parameter for new interfaces\n"
 	       "  -O = override ctrl_interface parameter for new interfaces\n"
 	       "  -p = driver parameters\n"
 	       "  -P = PID file\n"
 	       "  -q = decrease debugging verbosity (-qq even less)\n");
 #ifdef CONFIG_DBUS
@@ -165,15 +166,15 @@ int main(int argc, char *argv[])
 		return -1;
 	iface_count = 1;
 
 	wpa_supplicant_fd_workaround(1);
 
 	for (;;) {
 		c = getopt(argc, argv,
-			   "b:Bc:C:D:de:f:g:G:hi:I:KLNo:O:p:P:qsTtuvW");
+			   "b:Bc:C:D:de:f:g:G:hH:i:I:KLNo:O:p:P:qsTtuvW");
 		if (c < 0)
 			break;
 		switch (c) {
 		case 'b':
 			iface->bridge_ifname = optarg;
 			break;
 		case 'B':
@@ -212,14 +213,17 @@ int main(int argc, char *argv[])
 		case 'G':
 			params.ctrl_interface_group = optarg;
 			break;
 		case 'h':
 			usage();
 			exitcode = 0;
 			goto out;
+		case 'H':
+			iface->hostapd_ctrl = optarg;
+			break;
 		case 'i':
 			iface->ifname = optarg;
 			break;
 		case 'I':
 			iface->confanother = optarg;
 			break;
 		case 'K':
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -102,14 +102,54 @@ const char *wpa_supplicant_full_license5
 "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n"
 "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n"
 "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n"
 "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
 "\n";
 #endif /* CONFIG_NO_STDOUT_DEBUG */
 
+static int hostapd_stop(struct wpa_supplicant *wpa_s)
+{
+	const char *cmd = "DOWN";
+	char buf[256];
+	int len = sizeof(buf);
+
+	if (wpa_ctrl_request(wpa_s->hostapd, cmd, os_strlen(cmd), buf, &len, NULL) < 0) {
+		wpa_printf(MSG_ERROR, "\nFailed to stop hostapd AP interfaces\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int hostapd_reload(struct wpa_supplicant *wpa_s, struct wpa_bss *bss)
+{
+	char *cmd = NULL;
+	char buf[256];
+	int len = sizeof(buf);
+	enum hostapd_hw_mode hw_mode;
+	u8 channel;
+	int ret;
+
+	if (!bss)
+		return;
+
+	hw_mode = ieee80211_freq_to_chan(bss->freq, &channel);
+	if (asprintf(&cmd, "UPDATE channel=%d sec_chan=0 hw_mode=%d ieee80211n=%d",
+		     channel, hw_mode, !!bss->ht_capab) < 0)
+		return -1;
+
+	ret = wpa_ctrl_request(wpa_s->hostapd, cmd, os_strlen(cmd), buf, &len, NULL);
+	free(cmd);
+
+	if (ret < 0) {
+		wpa_printf(MSG_ERROR, "\nFailed to reload hostapd AP interfaces\n");
+		return -1;
+	}
+	return 0;
+}
+
 /* Configure default/group WEP keys for static WEP */
 int wpa_set_wep_keys(struct wpa_supplicant *wpa_s, struct wpa_ssid *ssid)
 {
 	int i, set = 0;
 
 	for (i = 0; i < NUM_WEP_KEYS; i++) {
 		if (ssid->wep_key_len[i] == 0)
@@ -727,17 +767,21 @@ void wpa_supplicant_set_state(struct wpa
 		wpa_s->after_wps = 0;
 		wpa_s->known_wps_freq = 0;
 #ifdef CONFIG_P2P
 		wpas_p2p_completed(wpa_s);
 #endif /* CONFIG_P2P */
 
                 sme_sched_obss_scan(wpa_s, 1);
+		if (wpa_s->hostapd)
+			hostapd_reload(wpa_s, wpa_s->current_bss);
                 wakeup_agents(wpa_s);
 	} else if (state == WPA_DISCONNECTED || state == WPA_ASSOCIATING ||
 		   state == WPA_ASSOCIATED) {
+		if (wpa_s->hostapd)
+			hostapd_stop(wpa_s);
 		wpa_s->new_connection = 1;
 		wpa_drv_set_operstate(wpa_s, 0);
 #ifndef IEEE8021X_EAPOL
 		wpa_drv_set_supp_port(wpa_s, 0);
 #endif /* IEEE8021X_EAPOL */
 		sme_sched_obss_scan(wpa_s, 0);
 	}
@@ -3393,14 +3437,28 @@ static int wpa_supplicant_init_iface(str
 				   "name '%s'.", iface->bridge_ifname);
 			return -1;
 		}
 		os_strlcpy(wpa_s->bridge_ifname, iface->bridge_ifname,
 			   sizeof(wpa_s->bridge_ifname));
 	}
 
+	if (iface->hostapd_ctrl) {
+		char *cmd = "DOWN";
+		char buf[256];
+		int len = sizeof(buf);
+
+		wpa_s->hostapd = wpa_ctrl_open(iface->hostapd_ctrl);
+		if (!wpa_s->hostapd) {
+			wpa_printf(MSG_ERROR, "\nFailed to connect to hostapd\n");
+			return -1;
+		}
+		if (hostapd_stop(wpa_s) < 0)
+			return -1;
+	}
+
 	/* RSNA Supplicant Key Management - INITIALIZE */
 	eapol_sm_notify_portEnabled(wpa_s->eapol, FALSE);
 	eapol_sm_notify_portValid(wpa_s->eapol, FALSE);
 
 	/* Initialize driver interface and register driver event handler before
 	 * L2 receive handler so that association events are processed before
 	 * EAPOL-Key packets if both become available for the same select()
@@ -3586,14 +3644,19 @@ static void wpa_supplicant_deinit_iface(
 
 	if (notify)
 		wpas_notify_iface_removed(wpa_s);
 
 	if (terminate)
 		wpa_msg(wpa_s, MSG_INFO, WPA_EVENT_TERMINATING);
 
+	if (wpa_s->hostapd) {
+		wpa_ctrl_close(wpa_s->hostapd);
+		wpa_s->hostapd = NULL;
+	}
+
 	if (wpa_s->ctrl_iface) {
 		wpa_supplicant_ctrl_iface_deinit(wpa_s->ctrl_iface);
 		wpa_s->ctrl_iface = NULL;
 	}
 
 	if (wpa_s->conf != NULL) {
 		wpa_config_free(wpa_s->conf);
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -93,14 +93,19 @@ struct wpa_interface {
 
 	/**
 	 * ifname - Interface name
 	 */
 	const char *ifname;
 
 	/**
+	 * hostapd_ctrl - path to hostapd control socket for notification
+	 */
+	const char *hostapd_ctrl;
+
+	/**
 	 * bridge_ifname - Optional bridge interface name
 	 *
 	 * If the driver interface (ifname) is included in a Linux bridge
 	 * device, the bridge interface may need to be used for receiving EAPOL
 	 * frames. This can be enabled by setting this variable to enable
 	 * receiving of EAPOL frames from an additional interface.
 	 */
@@ -379,14 +384,16 @@ struct wpa_supplicant {
 	char *dbus_groupobj_path;
 #ifdef CONFIG_AP
 	char *preq_notify_peer;
 #endif /* CONFIG_AP */
 #endif /* CONFIG_CTRL_IFACE_DBUS_NEW */
 	char bridge_ifname[16];
 
+	struct wpa_ctrl *hostapd;
+
 	char *confname;
 	char *confanother;
 	struct wpa_config *conf;
 	int countermeasures;
 	struct os_reltime last_michael_mic_error;
 	u8 bssid[ETH_ALEN];
 	u8 pending_bssid[ETH_ALEN]; /* If wpa_state == WPA_ASSOCIATING, this
