--- a/radvd.c
+++ b/radvd.c
@@ -18,15 +18,15 @@
 #include <includes.h>
 #include <radvd.h>
 #include <pathnames.h>
 
 struct Interface *IfaceList = NULL;
 
 char usage_str[] =
-	"[-hsv] [-d level] [-C config_file] [-m log_method] [-l log_file]\n"
+	"[-hsvb] [-d level] [-C config_file] [-m log_method] [-l log_file]\n"
 	"\t[-f facility] [-p pid_file] [-u username] [-t chrootdir]";
 
 #ifdef HAVE_GETOPT_LONG
 struct option prog_opt[] = {
 	{"debug", 1, 0, 'd'},
 	{"config", 1, 0, 'C'},
 	{"pidfile", 1, 0, 'p'},
@@ -34,14 +34,15 @@ struct option prog_opt[] = {
 	{"logmethod", 1, 0, 'm'},
 	{"facility", 1, 0, 'f'},
 	{"username", 1, 0, 'u'},
 	{"chrootdir", 1, 0, 't'},
 	{"version", 0, 0, 'v'},
 	{"help", 0, 0, 'h'},
 	{"singleprocess", 0, 0, 's'},
+	{"background", 0, 0, 'b'},
 	{NULL, 0, 0, 0}
 };
 #endif
 
 extern FILE *yyin;
 
 char *conf_file = NULL;
@@ -74,14 +75,15 @@ main(int argc, char *argv[])
 	int c, log_method;
 	char *logfile, *pidfile;
 	sigset_t oset, nset;
 	int facility, fd;
 	char *username = NULL;
 	char *chrootdir = NULL;
 	int singleprocess = 0;
+	int background = 0;
 #ifdef HAVE_GETOPT_LONG
 	int opt_idx;
 #endif
 
 	pname = ((pname=strrchr(argv[0],'/')) != NULL)?pname+1:argv[0];
 
 	srand((unsigned int)time(NULL));
@@ -150,14 +152,17 @@ main(int argc, char *argv[])
 			break;
 		case 'v':
 			version();
 			break;
 		case 's':
 			singleprocess = 1;
 			break;
+		case 'b':
+			background = 1;
+			break;
 		case 'h':
 			usage();
 #ifdef HAVE_GETOPT_LONG
 		case ':':
 			fprintf(stderr, "%s: option %s: parameter expected\n", pname,
 				prog_opt[opt_idx].name);
 			exit(1);
@@ -258,15 +263,15 @@ main(int argc, char *argv[])
 	}
 	
 	/*
 	 * okay, config file is read in, socket and stuff is setup, so
 	 * lets fork now...
 	 */
 
-	if (get_debuglevel() == 0) {
+	if (background != 0) {
 
 		/* Detach from controlling terminal */
 		if (daemon(0, 0) < 0)
 			perror("daemon");
 
 		/* close old logfiles, including stderr */
 		log_close();
