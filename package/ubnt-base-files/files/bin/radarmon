#!/bin/sh
POLL_RESULT_NO_ACTION=0
POLL_RESULT_TOGGLE_EXTENDED_STATUS=1
POLL_RESULT_DECREMENT_COUNTER=2
POLL_RESULT_INCREMENT_COUNTER=3
POLL_RESULT_RESET_COUNTER=4
MIN_TXUSE_FCC=17
MAX_TXUSE_FCC=30
MIN_TXUSE_ETSI=30
MAX_TXUSE_ETSI=43
MIN_TXUSE=0
MAX_TXUSE=100

line() {
        echo "----------------------------------------------------------------------------"
}

title() {
        line
        echo ""
        echo "                       Radar Detection Monitor"
        echo "                   (c)2015 Ubiquiti Networks, Inc."
        echo ""
        line
}

banner() {
        title
        echo ""
        echo "This script monitors DFS for radar detection events and reports at fixed intervals."
        echo ""
        echo "Background:"
        echo ""
        echo "    When NOL is off, UBNT's DFS may match the same radar test pattern more"
        echo "    than once.  This script cleans that up and makes monitoring output just"
        echo "    one line when a radar detection succeeds."
        echo ""
        echo "WARNING: If the radar pattern overlaps the end of one sampling interval and"
        echo "         the beginning of the next, and multiple detections occur, you will"
        echo "         still see radar detection status for both intervals.  Try increasing"
        echo "         the cooldown interval and waiting for a negative report before "
        echo "         sending the next test pattern.  This makes it easier to spot a new"
        echo "         detection."
        echo ""
        line
}

numdetects() {
    radartool shownumdetects | sed -n -r -e "/^Radar: / { s/^Radar: .*detected //;s/ radars.*\$//;p }"
}

usage() {
    echo "Usage: $(basename ${0}) <seconds between reports> [cooldown seconds] [penalty seconds]"
}

delay() {
        local SECONDS="${1}"
        if [ -z "${SECONDS}" ]; then
                sleep 0
        else
                INPUT=""
                read -r -n 1 -t ${SECONDS} INPUT
                if [ -n "${INPUT}" ]; then
                        case ${INPUT} in
                                r)
                                        return ${POLL_RESULT_RESET_COUNTER}
                                        ;;
                                +)
                                        return ${POLL_RESULT_INCREMENT_COUNTER}
                                        ;;
                                -)
                                        return ${POLL_RESULT_DECREMENT_COUNTER}
                                        ;;
                                x)
                                        return ${POLL_RESULT_TOGGLE_EXTENDED_STATUS}
                                        ;;
                                z)
                                        clear
                                        reset
                                        ;;
                                q)
                                        echo "Quitting"
                                        exit 0
                                        ;;
                                *)
                                        echo ""
                                        line
                                        echo "Primary Commands:"
                                        line
                                        echo ""
                                        echo "q - quit"
                                        echo "z - clear/reset screen"
                                        echo ""
                                        line
                                        echo "Counter Commands:"
                                        line
                                        echo ""
                                        echo "r - reset radar counter"
                                        echo "+ - increment radar counter"
                                        echo "- - decrement radar counter"
                                        echo ""
                                        line
                                        echo "Status Display:"
                                        line
                                        echo ""
                                        echo "x - toggle extended status"
                                        echo ""
                                        line
                                        echo ""
                                        ;;
                        esac
                fi;
        fi
        return ${POLL_RESULT_NO_ACTION}
}


tx_use() {
        STA_INFO="$(cat /proc/net/ubnt_poll/sta_info)"
        DS=$(echo "${STA_INFO}" | sed -r -e "s~/.*~~;s~^.*,([^,]*),([^,]*),([^,]*)[ ][0-9]*\$~\1~;")
        DF=$(echo "${STA_INFO}" | sed -r -e "s~/.*~~;s~^.*,([^,]*),([^,]*),([^,]*)[ ][0-9]*\$~\2~;")
        DE=$(echo "${STA_INFO}" | sed -r -e "s~/.*~~;s~^.*,([^,]*),([^,]*),([^,]*)[ ][0-9]*\$~\3~;")
        DT=$((DS+DF))
        if [ -z "${DE}" ] || [ ${DE} -eq 0 ]; then
            echo 0
        else
            #echo "DS=${DS} DF=${DF} DE=${DE} DT=${DT}"
            echo "00$(((DT*100)/DE))" | sed -r -e "s/.*(..)\$/\1/"
        fi;
}

get_dfsdebug() {
    dmesg -c 2>&1 >/dev/null
    radartool 2>&1 | sed -n -r -e "/    Debug level\.*/ { s/[^.]*[.]*//;p }"
}

get_off_channel() {
    dmesg -c 2>&1 >/dev/null
    OC="$(radartool 2>&1 | sed -n -r -e "/    DFS Test Off Channel\.*/ { s/[^.]*[.]*//;p }")"
    if [ "${OC}" = "yes" ]; then
        echo "1";
    else
        echo "0";
    fi;
}

get_dfsh() {
    dmesg -c 2>&1 >/dev/null
    DFSH="$(radartool 2>&1 | sed -n -r -e "/    DFSH On\.*/ { s/[^.]*[.]*//;p }")"
    if [ "${DFSH}" = "yes" ]; then
        echo "on";
    else
        echo "off";
    fi;
}

get_dfshf() {
    dmesg -c 2>&1 >/dev/null
    DFSHF="$(radartool 2>&1 | sed -n -r -e "/    DFSH Force\.*/ { s/[^.]*[.]*//;p }")"
    case ${DFSHF} in
        disabled)
            echo "";
            ;;
        on)
            echo "+";
            ;;
        off)
            echo "-"
            ;;
        calc)
            echo "*";
            ;;
        *)
            echo "${DFSHF}";
            ;;
    esac
}

get_dfsh_status() {
    echo "$(get_dfsh)$(get_dfshf)"
}

get_stats() {
#       echo "tx[$(get_rate txrate)/$(get_pct txuse)%] rx[$(get_rate rxrate)/$(get_pct rxuse)%] Q[$(get_qparam AIFSN)/$(get_qparam CWMIN)/$(get_qparam CWMAX)/$(get_qparam FLAGS)] "
#        echo "tx[$(tx_use)%] h[$(get_dfsh_status)]"
        echo "tx[$(tx_use)%]"
}

prompt() {
        local VISIBLE_COUNT="${1}"
        local STATS="${2}"
        if [ ${#STATS} -gt 0 ]; then
            echo "$(date +%H:%M:%S) ${STATS} detects[${VISIBLE_COUNT}]"
        else
            echo "$(date +%H:%M:%S) detects[${VISIBLE_COUNT}]"
        fi;
}

monitor() {
        local INTERVAL="${1}"
        local COOLDOWN_SECONDS_DEFAULT="${2}"
        local COOLDOWN_PENALTY="${3}"
        if [ -z "${INTERVAL}" ]; then
                usage
                return 1;
        fi;
        if [ -z "${COOLDOWN_SECONDS_DEFAULT}" ]; then
                COOLDOWN_SECONDS_DEFAULT=2
        fi;
        if [ -z "${COOLDOWN_PENALTY}" ]; then
                COOLDOWN_PENALTY=3
        fi;
        # Start with default dfsdebug setting
        local DFSDEBUG=1
        local EXTENDED_STATUS=1
        local VISIBLE_COUNT=0
        # NB: Change for release

        echo "Disabling console printk output."
        # Disable kernel output from console
        echo 0 >/proc/sys/kernel/printk
        # if event logging is on
        printf "Setting dfsdebug to 0x%08x.\n" ${DFSDEBUG}
        radartool dfsdebug ${DFSDEBUG} 2>&1 >/dev/null
        dmesg -c 2>&1 >/dev/null
	DOMAIN="$(radartool showfilters;dmesg -c | grep "DFS FILTERS" | sed -r -e "s/.* - //;s/\]$//;")"
	if [ "${DOMAIN}" = "ETSI" ]; then
		MIN_TXUSE=${MIN_TXUSE_ETSI}
		MAX_TXUSE=${MAX_TXUSE_ETSI}
	elif [ "${DOMAIN}" = "FCC" ]; then 
		MIN_TXUSE=${MIN_TXUSE_FCC}
		MAX_TXUSE=${MAX_TXUSE_FCC}
	else
		MIN_TXUSE=0
		MAX_TXUSE=100
	fi;
	echo "Setting duty cycle range for ${DOMAIN} (${MIN_TXUSE}-${MAX_TXUSE}%)"
        # Reset the counter
        echo "Reset statistics."
        radartool numdetects 0 2>&1 >/dev/null
#        radartool clearstats   2>&1 >/dev/null
        OLD_DETECTS=$(numdetects)
        GOT_RADAR=0
        COOLDOWN_SECONDS=${COOLDOWN_SECONDS_DEFAULT}
        COOLDOWN_COUNTER=0
        while [ 1 ]; do
                if [ "${EXTENDED_STATUS}" -eq 1 ]; then
                    STATS="$(get_stats)"
                else
                    STATS=""
                fi;
                DETECTS=$(numdetects)
                OFFCHANNEL="$(get_off_channel)"
                if [ "${OFFCHANNEL}" = "1" ]; then
                    OFFCHANNEL_MESSAGE=" (WARNING: NOT READY, Off Channel)"
                else
                    OFFCHANNEL_MESSAGE=""
                fi;
                # If we detected radar, mark analyzing until we can reach cooldown state.  reset cooldown state.
                if [ ${DETECTS} -gt ${OLD_DETECTS} ]; then
                        if [ "${GOT_RADAR}" -eq 0 ]; then
                                COOLDOWN_COUNTER=0
                        fi
                        GOT_RADAR=$((GOT_RADAR+$((DETECTS-OLD_DETECTS))))
                        if [ "${COOLDOWN_SECONDS}" -gt 0 ]; then
                                # Add a penalty each time we find radar during cooldown...
                                if [ "${COOLDOWN_COUNTER}" -gt 0 ]; then
                                        COOLDOWN_SECONDS=$((COOLDOWN_SECONDS+COOLDOWN_PENALTY))
                                fi;
                                echo "$(prompt ${VISIBLE_COUNT} "${STATS}") waiting...[cooldown ${COOLDOWN_SECONDS}s]${OFFCHANNEL_MESSAGE}"
                        fi
                else
                        # We got radar and we are maybe counting cooldowns...
                        if [ "${GOT_RADAR}" -gt 0 ]; then
                                COOLDOWN_COUNTER=$((COOLDOWN_COUNTER+1))
                                if [ $((COOLDOWN_COUNTER)) -lt $((COOLDOWN_SECONDS)) ]; then
                                        echo "$(prompt ${VISIBLE_COUNT} "${STATS}") waiting...[cooldown $((COOLDOWN_SECONDS-COOLDOWN_COUNTER))s]${OFFCHANNEL_MESSAGE}"
                                else
                                        # Cooldown is disabled or complete!
                                        VISIBLE_COUNT=$((VISIBLE_COUNT+1))
                                        echo "$(prompt ${VISIBLE_COUNT} "${STATS}") detected...**RADAR** [+$((GOT_RADAR))]${OFFCHANNEL_MESSAGE}"
                                        #echo "$(prompt ${VISIBLE_COUNT} "${STATS}") listening..."
                                        GOT_RADAR=0
                                        COOLDOWN_COUNTER=0
                                        COOLDOWN_SECONDS=${COOLDOWN_SECONDS_DEFAULT}
                                fi;
                        else
                                #TXUSE="$(amstainfo -f txuse | sed -n -r -e "2 {s/^([0-9]*).*/\1/;s/[.]//;p}")"
                                TXUSE="$(tx_use)"
                                if [ "${TXUSE}" -lt ${MIN_TXUSE} ] ||  [ "${TXUSE}" -ge ${MAX_TXUSE} ]; then
                                        echo "$(prompt ${VISIBLE_COUNT} "${STATS}") *** NOT READY *** (WARNING: CHECK STREAM)${OFFCHANNEL_MESSAGE}"
                                elif [ "${OFFCHANNEL}" = "1" ]; then
                                    if [ "${TXUSE}" -ge ${MAX_TXUSE} ]; then
                                            echo "$(prompt ${VISIBLE_COUNT} "${STATS}") *** NOT READY *** (WARNING: TXUSE HIGH)${OFFCHANNEL_MESSAGE}"
                                    else
                                            echo "$(prompt ${VISIBLE_COUNT} "${STATS}") *** NOT READY *** ${OFFCHANNEL_MESSAGE}"
                                    fi;
                               else
                                    if [ "${TXUSE}" -ge ${MAX_TXUSE} ]; then
                                            echo "$(prompt ${VISIBLE_COUNT} "${STATS}") listening... (WARNING: TXUSE HIGH)"
                                    else
                                            echo "$(prompt ${VISIBLE_COUNT} "${STATS}") listening..."
                                    fi;
                               fi;
                        fi;
                fi;
                OLD_DETECTS=${DETECTS}
                DELAY_RET=0
                if [ "${GOT_RADAR}" -ne 0 ]; then
                        if [ "${COOLDOWN_SECONDS}" -gt 0 ]; then
                                delay 1
                                DELAY_RET=$?
                        fi
                else
                        delay ${INTERVAL}
                        DELAY_RET=$?
                fi
                # User wants to reset
                if [ ${DELAY_RET} -eq ${POLL_RESULT_RESET_COUNTER} ]; then
                        echo "Counter reset."
                        VISIBLE_COUNT=0
                        GOT_RADAR=0
                        COOLDOWN_COUNTER=0
                        COOLDOWN_SECONDS=${COOLDOWN_SECONDS_DEFAULT}
                elif [ ${DELAY_RET} -eq ${POLL_RESULT_DECREMENT_COUNTER} ]; then
                        if [ ${VISIBLE_COUNT} -gt 0 ]; then
                             echo "Counter decremented."
                             VISIBLE_COUNT=$((VISIBLE_COUNT-1))
                        else
                             echo "Counter is already zero."
                        fi;
                elif [ ${DELAY_RET} -eq ${POLL_RESULT_INCREMENT_COUNTER} ]; then
                         echo "Counter incremented."
                         VISIBLE_COUNT=$((VISIBLE_COUNT+1))
                elif [ ${DELAY_RET} -eq ${POLL_RESULT_TOGGLE_EXTENDED_STATUS} ]; then
                        if [ "${EXTENDED_STATUS}" -eq 1 ]; then
                            echo "Extended status display disabled."
                            EXTENDED_STATUS=0
                        else
                            echo "Extended status display enabled."
                            EXTENDED_STATUS=1
                        fi;
                fi;
        done;
}

echo ""
banner
monitor $@
exit $?
