--- a/procps/sysctl.c
+++ b/procps/sysctl.c
@@ -14,15 +14,15 @@
  *
  */
 
 #include "libbb.h"
 
 static int sysctl_read_setting(const char *setting);
 static int sysctl_write_setting(const char *setting);
-static int sysctl_display_all(const char *path);
+static int sysctl_act_recursive(const char *path);
 static int sysctl_preload_file_and_exit(const char *filename);
 
 static const char ETC_SYSCTL_CONF[] ALIGN1 = "/etc/sysctl.conf";
 static const char PROC_SYS[] ALIGN1 = "/proc/sys/";
 enum { strlen_PROC_SYS = sizeof(PROC_SYS) - 1 };
 
 /* error messages */
@@ -52,36 +52,82 @@ enum {
 	FLAG_SHOW_KEY_ERRORS = 1 << 1,
 	FLAG_TABLE_FORMAT    = 1 << 2, /* not implemented */
 	FLAG_SHOW_ALL        = 1 << 3,
 	FLAG_PRELOAD_FILE    = 1 << 4,
 	FLAG_WRITE           = 1 << 5,
 };
 
+static void sysctl_dots_to_slashes(char *name)
+{
+	char *cptr, *last_good, *end;
+
+	/* Convert minimum number of '.' to '/' so that
+	 * we end up with existing file's name.
+	 *
+	 * Example from bug 3894:
+	 * net.ipv4.conf.eth0.100.mc_forwarding ->
+	 * net/ipv4/conf/eth0.100/mc_forwarding
+	 * NB: net/ipv4/conf/eth0/mc_forwarding *also exists*,
+	 * therefore we must start from the end, and if
+	 * we replaced even one . -> /, start over again,
+	 * but never replace dots before the position
+	 * where last replacement occurred.
+	 *
+	 * Another bug we later had is that
+	 * net.ipv4.conf.eth0.100
+	 * (without .mc_forwarding) was mishandled.
+	 *
+	 * To set up testing: modprobe 8021q; vconfig add eth0 100
+	 */
+	end = name + strlen(name);
+	last_good = name - 1;
+	*end = '.'; /* trick the loop into trying full name too */
+
+ again:
+	cptr = end;
+	while (cptr > last_good) {
+		if (*cptr == '.') {
+			*cptr = '\0';
+			//bb_error_msg("trying:'%s'", name);
+			if (access(name, F_OK) == 0) {
+				*cptr = '/';
+				//bb_error_msg("replaced:'%s'", name);
+				last_good = cptr;
+				goto again;
+			}
+			*cptr = '.';
+		}
+		cptr--;
+	}
+	*end = '\0';
+}
+
+
 int sysctl_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int sysctl_main(int argc ATTRIBUTE_UNUSED, char **argv)
 {
 	int retval;
 	int opt;
 
 	opt = getopt32(argv, "+neAapw"); /* '+' - stop on first non-option */
 	argv += optind;
 	opt ^= (FLAG_SHOW_KEYS | FLAG_SHOW_KEY_ERRORS);
 	option_mask32 ^= (FLAG_SHOW_KEYS | FLAG_SHOW_KEY_ERRORS);
 
-	if (opt & (FLAG_TABLE_FORMAT | FLAG_SHOW_ALL))
-		return sysctl_display_all(PROC_SYS);
 	if (opt & FLAG_PRELOAD_FILE)
 		return sysctl_preload_file_and_exit(*argv ? *argv : ETC_SYSCTL_CONF);
 
+        xchdir(PROC_SYS);
+	if (opt & (FLAG_TABLE_FORMAT | FLAG_SHOW_ALL))
+		return sysctl_act_recursive(".");
+
 	retval = 0;
 	while (*argv) {
-		if (opt & FLAG_WRITE)
-			retval |= sysctl_write_setting(*argv);
-		else
-			retval |= sysctl_read_setting(*argv);
+		sysctl_dots_to_slashes(*argv);
+                retval |= sysctl_act_recursive(*argv);
 		argv++;
 	}
 
 	return retval;
 } /* end sysctl_main() */
 
 /*
@@ -165,17 +211,14 @@ static int sysctl_write_setting(const ch
 		bb_error_msg(ERR_MALFORMED_SETTING, setting);
 		return EXIT_FAILURE;
 	}
 
 	tmpname = xasprintf("%s%.*s", PROC_SYS, (int)(equals - name), name);
 	outname = xstrdup(tmpname + strlen_PROC_SYS);
 
-	while ((cptr = strchr(tmpname, '.')) != NULL)
-		*cptr = '/';
-
 	while ((cptr = strchr(outname, '/')) != NULL)
 		*cptr = '.';
 
 	fd = open(tmpname, O_WRONLY | O_CREAT | O_TRUNC, 0666);
 	if (fd < 0) {
 		switch (errno) {
 		case ENOENT:
@@ -220,16 +263,14 @@ static int sysctl_read_setting(const cha
 			bb_error_msg(ERR_INVALID_KEY, name);
 		return -1;
 	}
 
 	tmpname = concat_path_file(PROC_SYS, name);
 	outname = xstrdup(tmpname + strlen_PROC_SYS);
 
-	while ((cptr = strchr(tmpname, '.')) != NULL)
-		*cptr = '/';
 	while ((cptr = strchr(outname, '/')) != NULL)
 		*cptr = '.';
 
 	fp = fopen(tmpname, "r");
 	if (fp == NULL) {
 		switch (errno) {
 		case ENOENT:
@@ -256,39 +297,42 @@ static int sysctl_read_setting(const cha
 	}
 
 	free(tmpname);
 	free(outname);
 	return retval;
 } /* end sysctl_read_setting() */
 
-/*
- *     Display all the sysctl settings
- */
-static int sysctl_display_all(const char *path)
+static int sysctl_act_recursive(const char *path)
 {
+	DIR *dirp;
+	struct stat buf;
+	struct dirent *entry;
+	char *next;
 	int retval = 0;
-	DIR *dp;
-	struct dirent *de;
-	char *tmpdir;
-	struct stat ts;
 
-	dp = opendir(path);
-	if (!dp) {
-		return EXIT_FAILURE;
-	}
-	while ((de = readdir(dp)) != NULL) {
-		tmpdir = concat_subpath_file(path, de->d_name);
-		if (tmpdir == NULL)
-			continue; /* . or .. */
-		if (stat(tmpdir, &ts) != 0) {
-			bb_perror_msg(tmpdir);
-		} else if (S_ISDIR(ts.st_mode)) {
-			retval |= sysctl_display_all(tmpdir);
-		} else {
-			retval |= sysctl_read_setting(tmpdir + strlen_PROC_SYS);
+        stat(path, &buf);
+	if (S_ISDIR(buf.st_mode) && !(option_mask32 & FLAG_WRITE)) {
+		dirp = opendir(path);
+		if (dirp == NULL)
+			return -1;
+		while ((entry = readdir(dirp)) != NULL) {
+			next = concat_subpath_file(path, entry->d_name);
+			if (next == NULL)
+				continue; /* d_name is "." or ".." */
+			/* if path was ".", drop "./" prefix: */
+			retval |= sysctl_act_recursive((next[0] == '.' && next[1] == '/') ?
+					next + 2 : next);
+			free(next);
 		}
-		free(tmpdir);
-	} /* end while */
-	closedir(dp);
+		closedir(dirp);
+	} else {
+		char *name = xstrdup(path);
+                if (option_mask32 & FLAG_WRITE)
+                    retval |= sysctl_write_setting(name);
+                else
+                    retval |= sysctl_read_setting(name);
+		free(name);
+	}
 
 	return retval;
-} /* end sysctl_display_all() */
+}
+
