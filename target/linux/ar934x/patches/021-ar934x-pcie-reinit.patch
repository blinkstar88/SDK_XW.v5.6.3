--- a/arch/mips/include/asm/mach-atheros/934x.h
+++ b/arch/mips/include/asm/mach-atheros/934x.h
@@ -109,14 +109,15 @@
 #define REF_DIV_SHIFT			10
 #define REF_DIV_MASK			0xf
 #define AHB_DIV_SHIFT			19
 #define AHB_DIV_MASK			0x1
 #define DDR_DIV_SHIFT			22
 #define DDR_DIV_MASK			0x1
 #define ATH_DDR_PLL_CONFIG		ATH_PLL_BASE+0x4
+#define ATH_PCIE_PLL_CONFIG		ATH_PLL_BASE+0x10
 #define ATH_ETH_XMII_CONFIG		ATH_PLL_BASE+0x2c
 #define ATH_AUDIO_PLL_CONFIG		ATH_PLL_BASE+0x30
 #define ATH_FRAC_FREQ_CONFIG		ATH_PLL_BASE+0x34
 
 #define ATH_ETH_INT0_CLK		ATH_PLL_BASE+0x14
 #define ATH_ETH_INT1_CLK		ATH_PLL_BASE+0x18
 
@@ -803,14 +804,16 @@ void ar7240_pci_irq_init(int irq_base);
 #define ATH_RESET_DDR			(1 << 16)
 #define ATH_RESET_GE1_MAC		(1 << 13)
 #define ATH_RESET_GE1_PHY		(1 << 12)
 #define ATH_RESET_USB_PHY_ANALOG	(1 << 11)
 #define ATH_RESET_PCIE_PHY_SHIFT	(1 << 10)
 #define ATH_RESET_GE0_MAC		(1 << 9)
 #define ATH_RESET_GE0_PHY		(1 << 8)
+#define ATH_RESET_PCIE_PHY              (1 << 7)
+#define ATH_RESET_PCIE                  (1 << 6)
 #define ATH_RESET_USBSUS_OVRIDE		(1 << 3)
 #define ATH_RESET_USB_OHCI_DLL		(1 << 3)
 #define ATH_RESET_USB_HOST		(1 << 5)
 #define ATH_RESET_USB_PHY		(1 << 4)
 #define ATH_RESET_PCI_BUS		(1 << 1)
 #define ATH_RESET_PCI_CORE		(1 << 0)
 #define ATH_RESET_I2S			(1 << 0)
--- a/arch/mips/pci/pci-ath.c
+++ b/arch/mips/pci/pci-ath.c
@@ -193,14 +193,127 @@ extern struct pci_ops ath_pci_ops;
 static struct pci_controller ath_pci_controller = {
 	.pci_ops	= &ath_pci_ops,
 	.mem_resource	= &ath_mem_resource,
 	.io_resource	= &ath_io_resource,
 };
 #endif /* CONFIG_PERICOM */
 
+static int ath_pci_reinit(void)
+{
+	uint32_t cmd = 0, reg_val;
+	reg_val = ath_reg_rd(0x1804006c);
+	ath_reg_wr(0x1804006c, reg_val | 2);
+	ath_reg_wr(0x1804000c, 1 << 2);
+
+	udelay(100000);
+
+	ath_reg_rmw_set(ATH_RESET, ATH_RESET_PCIE);	// core in reset
+	udelay(10000);
+	ath_reg_rmw_set(ATH_RESET, ATH_RESET_PCIE_PHY);// phy in reset
+	udelay(10000);
+	ath_reg_rmw_clear(0x180600bc, (1 << 14) & 0x4000); // pci phy analog in reset
+	udelay(10000);
+	ath_reg_wr(0x180f0000, 0x1ffc0);			// ltssm is disabled
+	udelay(100);
+	ath_reg_wr_nf(ATH_PCI_LCL_RESET, 0);	// End point in reset
+	udelay(100000);
+
+
+	if ((ath_reg_rd(ATH_REV_ID) & 0xf) == 0) {
+		ath_reg_wr_nf(ATH_PCIE_PLL_CONFIG,
+			PCIE_PLL_CONFIG_REFDIV_SET(1) |
+			PCIE_PLL_CONFIG_BYPASS_SET(1) |
+			PCIE_PLL_CONFIG_PLLPWD_SET(1));
+		udelay(10000);
+		ath_reg_wr_nf(ATH_PCIE_PLL_CONFIG,
+			PCIE_PLL_CONFIG_REFDIV_SET(1) |
+			PCIE_PLL_CONFIG_BYPASS_SET(1) |
+			PCIE_PLL_CONFIG_PLLPWD_SET(0));
+		udelay(1000);
+		ath_reg_wr_nf(ATH_PCIE_PLL_CONFIG,
+			ath_reg_rd(ATH_PCIE_PLL_CONFIG) &
+			(~PCIE_PLL_CONFIG_BYPASS_SET(1)));
+		udelay(1000);
+	} else {
+		ath_reg_wr_nf(ATH_PCIE_PLL_CONFIG,
+			PCIE_PLL_CONFIG_REFDIV_SET(2) |
+			PCIE_PLL_CONFIG_BYPASS_SET(1) |
+			PCIE_PLL_CONFIG_PLLPWD_SET(1));
+		udelay(10000);
+
+		ath_reg_wr_nf(0x18116c00, (0x2 << 27) | (0x28 << 18) | 0);
+		do {
+			ath_reg_wr_nf(0x18116c04, (0x1 << 30) | (0x4 << 26) | (0x32 << 19) | (1 << 16) | (3 << 13) | (0x1e << 7));
+			ath_reg_wr_nf(0x18116c08, (6 << 23));
+			udelay(10000);
+			ath_reg_wr_nf(0x18116c04, (0x1 << 30) | (0x4 << 26) | (0x32 << 19) | (3 << 13) | (0x1e << 7));
+
+			ath_reg_rmw_clear(0x18116c08, (1 << 30) & 0x40000000);
+			ath_reg_rmw_set(0x18116c08, (1 << 30) & 0x40000000);
+
+			ath_reg_wr(0x1804000c, 1 << 2);
+
+			udelay(1000);
+
+			while (((cmd = ath_reg_rd(0x18116c0c)) & ((1 << 3) & 0x8)) == 0) {
+				printk(".");
+				udelay(10);
+			}
+			printk(".");
+			udelay(1000);
+
+		} while ((cmd = (((ath_reg_rd(0x18116c08)) & 0x007ffff8) >> 3)) >= 0x40000);
+
+		ath_reg_rmw_clear(ATH_PCIE_PLL_CONFIG, PCIE_PLL_CONFIG_PLLPWD_SET(1));
+		udelay(10000);
+		ath_reg_rmw_clear(ATH_PCIE_PLL_CONFIG, PCIE_PLL_CONFIG_BYPASS_SET(1));
+		udelay(10000);
+
+	}
+	ath_reg_rmw_set(0x180600bc, (1 << 14) & 0x4000); // pci phy analog out of reset
+	udelay(10000);
+
+	ath_reg_rmw_clear(ATH_RESET, ATH_RESET_PCIE_PHY);	// phy out of reset
+	udelay(10000);
+
+	ath_reg_rmw_clear(ATH_RESET, ATH_RESET_PCIE);	// core out of reset
+	udelay(1000);
+
+	cmd = PCI_COMMAND_MEMORY | PCI_COMMAND_MASTER | PCI_COMMAND_INVALIDATE |
+	      PCI_COMMAND_PARITY|PCI_COMMAND_SERR|PCI_COMMAND_FAST_BACK;
+
+	ath_local_write_config(PCI_COMMAND, 4, cmd);		// pci cmd reg init
+	ath_local_write_config(0x20, 4, 0x1ff01000);		// membase setting
+	ath_local_write_config(0x24, 4, 0x1ff01000);		// prefetch membase setting
+
+
+	if ((is_ar7241() || is_ar7242() || is_wasp())) {
+		ath_reg_wr(0x180f0000, 0x1ffc1);		// ltssm enable
+	} else {
+		ath_reg_wr(0x180f0000, 0x1);
+	}
+	udelay(100000);
+
+	ath_reg_wr_nf(ATH_PCI_LCL_RESET, 4);		// EP out of reset
+	udelay(100000);
+
+	/*
+	 *  Delay to get the correct status from PCI LCL RESET register
+	 */
+	udelay(100000);
+
+	/*
+	 * Check if the WLAN PCI-E H/W is present
+	 */
+	if (((ath_reg_rd(ATH_PCI_LCL_RESET)) & 0x1) == 0x0) {
+	    return -1;
+	}
+        return 0;
+}
+
 /*
  * We want a 1:1 mapping between PCI and DDR for inbound and outbound.
  * The PCI<---AHB decoding works as follows:
  *
  * 8 registers in the DDR unit provide software configurable 32 bit offsets
  * for each of the eight 16MB PCI windows in the 128MB. The offsets will be
  * added to any address in the 16MB segment before being sent to the PCI unit.
@@ -227,29 +340,41 @@ static struct pci_controller ath_pci_con
  *                         = 0x120000ff
  *
  * There is no translation for inbound access (PCI device as a master)
  */
 static int __init ath_pcibios_init(void)
 {
 	uint32_t cmd;
+#define PCIE_REINIT_COUNT 10
+       int8_t count = PCIE_REINIT_COUNT;
 
 #ifdef CONFIG_MACH_AR934x
-	if (is_ar9341()) {
+	if (is_ar9341() || is_ar9342()) {
 		return 0;
 	}
 #endif
-	/*
-	 * Check if the WLAN PCI-E H/W is present, If the
-	 * WLAN H/W is not present, skip the PCI
-	 * initialization code and just return.
-	 */
-
-	if (((ath_reg_rd(ATH_PCI_LCL_RESET)) & 0x1) == 0x0) {
-		printk("***** Warning *****: PCIe WLAN H/W not found !!!\n");
-		return 0;
+	while(count--) {
+	    /*
+	     * Check if the WLAN PCI-E H/W is present, If the
+	     * WLAN H/W is not present, skip the PCI
+	     * initialization code and just return.
+	     */
+
+	    if (((ath_reg_rd(ATH_PCI_LCL_RESET)) & 0x1) == 0x0) {
+                ath_pci_reinit();
+                continue;
+	    } else {
+                break;
+	    }
+	}
+	if (count < 0) {
+	    printk("PCIe WLAN H/W not present.\n");
+	    return 0;
+	} else {
+	    printk("PCIe WLAN H/W found [tries: %d]\n", PCIE_REINIT_COUNT - count);
 	}
 
         if ((is_ar7241() || is_ar7242()))
 		ath_reg_wr(ATH_PCI_LCL_APP, (ath_reg_rd(ATH_PCI_LCL_APP) | (0x1 << 16)));
 
 #ifdef CONFIG_PERICOM
 
