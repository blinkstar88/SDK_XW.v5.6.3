--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -3267,14 +3267,20 @@ config PPP
 	  synchronous PPP", below.
 
 	  If you said Y to "Version information on all symbols" above, then
 	  you cannot compile the PPP driver into the kernel; you can then only
 	  compile it as a module. To compile this driver as a module, choose M
 	  here. The module will be called ppp_generic.
 
+config PPP_PACKET_INFO
+	bool "PPP packet info in sk_buff"
+	depends on PPP
+	help
+	  If unsure, say N.
+
 config PPP_MULTILINK
 	bool "PPP multilink support (EXPERIMENTAL)"
 	depends on PPP && EXPERIMENTAL
 	help
 	  PPP multilink is a protocol (defined in RFC 1990) which allows you
 	  to combine several (logical or physical) lines into one logical PPP
 	  connection, so that you can utilize your full bandwidth.
--- a/drivers/net/ppp_generic.c
+++ b/drivers/net/ppp_generic.c
@@ -1105,14 +1105,17 @@ pad_compress_skb(struct ppp *ppp, struct
 			    ppp->dev->hard_header_len - PPP_HDRLEN);
 
 	/* compressor still expects A/C bytes in hdr */
 	len = ppp->xcomp->compress(ppp->xc_state, skb->data - 2,
 				   new_skb->data, skb->len + 2,
 				   compressor_skb_size);
 	if (len > 0 && (ppp->flags & SC_CCP_UP)) {
+#ifdef CONFIG_PPP_PACKET_INFO
+		memcpy(&new_skb->ppp_info, &skb->ppp_info, sizeof(skb->ppp_info));
+#endif
 		kfree_skb(skb);
 		skb = new_skb;
 		skb_put(skb, len);
 		skb_pull(skb, 2);	/* pull off A/C bytes */
 	} else if (len == 0) {
 		/* didn't compress, or CCP not up yet */
 		kfree_skb(new_skb);
@@ -1131,27 +1134,118 @@ pad_compress_skb(struct ppp *ppp, struct
 		kfree_skb(skb);
 		kfree_skb(new_skb);
 		new_skb = NULL;
 	}
 	return new_skb;
 }
 
+#ifdef CONFIG_PPP_PACKET_INFO
+
+#define _PPP_PROTO_HEADER_LEN	2
+/** Field offset positions for IP, UDP and TCP */
+
+#define _IP_BYTE_POSITION_VHL			0
+#define _IP_BYTE_POSITION_TOS			(_IP_BYTE_POSITION_VHL + 1)
+#define _IP_WORD_POSITION_TOTLEN		(_IP_BYTE_POSITION_TOS + 1)
+#define _IP_WORD_POSITION_ID			(_IP_WORD_POSITION_TOTLEN + 2)
+#define _IP_WORD_POSITION_FLAGSFRAG		(_IP_WORD_POSITION_ID + 2)
+#define _IP_BYTE_POSITION_TTL			(_IP_WORD_POSITION_FLAGSFRAG + 2)
+#define _IP_BYTE_POSITION_PROTOCOL		(_IP_BYTE_POSITION_TTL + 1)
+#define _IP_WORD_POSITION_CHKSUM		(_IP_BYTE_POSITION_PROTOCOL + 1)
+#define _IP_DWORD_POSITION_SRCADDR		(_IP_WORD_POSITION_CHKSUM + 2)
+#define _IP_DWORD_POSITION_DSTADDR		(_IP_DWORD_POSITION_SRCADDR + 4)
+#define _IP_POSITION_OPTIONS			(_IP_DWORD_POSITION_DSTADDR + 4)
+
+#define _IP_PROTO_UDP				17
+#define _IP_PROTO_TCP				6
+#define _IP_PROTO_ICMP				1
+
+#define	_UDP_WORD_POSITION_SRC_PORT	0
+#define	_UDP_WORD_POSITION_DST_PORT	(_UDP_WORD_POSITION_SRC_PORT + 2)
+#define	_UDP_WORD_POSITION_UDP_LENGTH	(_UDP_WORD_POSITION_DST_PORT + 2)
+#define	_UDP_WORD_POSITION_UDP_CHKSUM	(_UDP_WORD_POSITION_UDP_LENGTH + 2)
+#define _UDP_POSITION_DATA		(_UDP_WORD_POSITION_UDP_CHKSUM + 2)
+
+#define	_TCP_WORD_POSITION_SRC_PORT		0
+#define	_TCP_WORD_POSITION_DST_PORT		(_TCP_WORD_POSITION_SRC_PORT + 2)
+#define	_TCP_DWORD_POSITION_SEQ_NUMBER		(_TCP_WORD_POSITION_DST_PORT + 2)
+#define	_TCP_DWORD_POSITION_ACK_NUMBER		(_TCP_DWORD_POSITION_SEQ_NUMBER + 4)
+#define _TCP_DWORD_POSITION_DATA_OFFSET_FIELD	(_TCP_DWORD_POSITION_ACK_NUMBER + 4)
+
+#define _IP_HEADER_GET_LENGTH(version_header_len) (version_header_len & 0x0F)
+
+#define _ICMP_TYPE_ECHO_REPLY		0
+#define _ICMP_TYPE_ECHO_REQUEST		8
+
+#define _READ_BE16(_dest, _src) {\
+	__u16 __val;\
+	memcpy(&__val, (_src), sizeof(__u16));\
+	(_dest) = be16_to_cpu(__val);\
+}
+
+
+static void mark_ppp_packet_info(int proto, struct sk_buff *skb)
+{
+	struct skb_ppp_info* pppi;
+	__u8* data;
+
+	pppi = &skb->ppp_info;
+
+	pppi->magic	= SKB_PPP_INFO_MAGIC;
+	pppi->ts_ppp_in = jiffies;
+	pppi->ppp_proto	= proto;
+
+	data = skb->data + _PPP_PROTO_HEADER_LEN;
+
+	if(pppi->ppp_proto == PPP_IP) {
+
+		int hdr_len;
+
+		hdr_len = _IP_HEADER_GET_LENGTH(data[_IP_BYTE_POSITION_VHL]);
+
+		pppi->ip_proto       = data[_IP_BYTE_POSITION_PROTOCOL];
+		pppi->ip_tos_diffsrv = data[_IP_BYTE_POSITION_TOS];
+
+		memcpy(pppi->ip_src_addr, &data[_IP_DWORD_POSITION_SRCADDR], 4);
+		memcpy(pppi->ip_dst_addr, &data[_IP_DWORD_POSITION_DSTADDR], 4);
+
+		data += (hdr_len << 2);
+
+		if(pppi->ip_proto == _IP_PROTO_ICMP) {
+			pppi->proto_data.icmp.type = data[0];
+		} else if(pppi->ip_proto == _IP_PROTO_TCP) {
+			_READ_BE16(pppi->proto_data.tcp.dst_port, &data[_TCP_WORD_POSITION_DST_PORT]);
+			_READ_BE16(pppi->proto_data.tcp.src_port, &data[_TCP_WORD_POSITION_SRC_PORT]);
+		} else if(pppi->ip_proto == _IP_PROTO_UDP) {
+			_READ_BE16(pppi->proto_data.udp.dst_port, &data[_UDP_WORD_POSITION_DST_PORT]);
+			_READ_BE16(pppi->proto_data.udp.src_port, &data[_UDP_WORD_POSITION_SRC_PORT]);
+		}
+
+	}
+}
+
+#endif /* CONFIG_PPP_PACKET_INFO */
+
 /*
  * Compress and send a frame.
  * The caller should have locked the xmit path,
  * and xmit_pending should be 0.
  */
 static void
 ppp_send_frame(struct ppp *ppp, struct sk_buff *skb)
 {
 	int proto = PPP_PROTO(skb);
 	struct sk_buff *new_skb;
 	int len;
 	unsigned char *cp;
 
+#ifdef CONFIG_PPP_PACKET_INFO
+	mark_ppp_packet_info(proto, skb);
+#endif /* CONFIG_PPP_PACKET_INFO */
+
 	if (proto < 0x8000) {
 #ifdef CONFIG_PPP_FILTER
 		/* check if we should pass this packet */
 		/* the filter instructions are constructed assuming
 		   a four-byte PPP header on each packet */
 		*skb_push(skb, 2) = 1;
 		if (ppp->pass_filter
@@ -1200,14 +1294,17 @@ ppp_send_frame(struct ppp *ppp, struct s
 			if (cp[0] & SL_TYPE_COMPRESSED_TCP) {
 				proto = PPP_VJC_COMP;
 				cp[0] &= ~SL_TYPE_COMPRESSED_TCP;
 			} else {
 				proto = PPP_VJC_UNCOMP;
 				cp[0] = skb->data[2];
 			}
+#ifdef CONFIG_PPP_PACKET_INFO
+			memcpy(&new_skb->ppp_info, &skb->ppp_info, sizeof(skb->ppp_info));
+#endif
 			kfree_skb(skb);
 			skb = new_skb;
 			cp = skb_put(skb, len + 2);
 			cp[0] = 0;
 			cp[1] = proto;
 		}
 		break;
--- a/drivers/net/pppoe.c
+++ b/drivers/net/pppoe.c
@@ -931,14 +931,18 @@ static int __pppoe_xmit(struct sock *sk,
 
 	/* Copy the data if there is no space for the header or if it's
 	 * read-only.
 	 */
 	if (skb_cow_head(skb, sizeof(*ph) + dev->hard_header_len))
 		goto abort;
 
+#ifdef CONFIG_PPP_PACKET_INFO
+	skb->ppp_info.ts_pppoe_in = jiffies;
+#endif
+
 	__skb_push(skb, sizeof(*ph));
 	skb_reset_network_header(skb);
 
 	ph = pppoe_hdr(skb);
 	ph->ver	= 1;
 	ph->type = 1;
 	ph->code = 0;
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -254,14 +254,50 @@ enum {
 
 #ifdef NET_SKBUFF_DATA_USES_OFFSET
 typedef unsigned int sk_buff_data_t;
 #else
 typedef unsigned char *sk_buff_data_t;
 #endif
 
+#ifdef CONFIG_PPP_PACKET_INFO
+
+#define SKB_PPP_INFO_MAGIC 0xFFEEDDCC
+
+struct skb_ppp_info {
+
+	__u32	magic;
+	__u32	ppp_proto;
+
+	__u8	ip_proto;
+	__u8	ip_tos_diffsrv;
+	__u8	ip_dst_addr[4];
+	__u8	ip_src_addr[4];
+
+	unsigned long	ts_ppp_in;
+	unsigned long	ts_pppoe_in;
+
+	union {
+		struct {
+			__u8	type;
+		}icmp;
+
+		struct {
+			__u16	dst_port;
+			__u16	src_port;
+		}tcp;
+
+		struct {
+			__u16	dst_port;
+			__u16	src_port;
+		}udp;
+
+	}proto_data;
+};
+#endif
+
 /** 
  *	struct sk_buff - socket buffer
  *	@next: Next buffer in list
  *	@prev: Previous buffer in list
  *	@sk: Socket we are owned by
  *	@tstamp: Time we arrived
  *	@dev: Device we arrived on/are leaving by
@@ -333,14 +369,18 @@ struct sk_buff {
 	 * first. This is owned by whoever has the skb queued ATM.
 	 */
 	char			cb[48];
 #if defined(CONFIG_IMQ) || defined(CONFIG_IMQ_MODULE)
 	void			*cb_next;
 #endif
 
+#ifdef CONFIG_PPP_PACKET_INFO
+	struct skb_ppp_info	ppp_info;
+#endif
+
 	unsigned int		len,
 				data_len;
 	__u16			mac_len,
 				hdr_len;
 	union {
 		__wsum		csum;
 		struct {
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -835,14 +835,17 @@ static void __copy_skb_header(struct sk_
 	new->network_header	= old->network_header;
 	new->mac_header		= old->mac_header;
 	skb_dst_set(new, dst_clone(skb_dst(old)));
 #ifdef CONFIG_XFRM
 	new->sp			= secpath_get(old->sp);
 #endif
 	memcpy(new->cb, old->cb, sizeof(old->cb));
+#ifdef CONFIG_PPP_PACKET_INFO
+	memcpy(&new->ppp_info, &old->ppp_info, sizeof(old->ppp_info));
+#endif
 #if defined(CONFIG_IMQ) || defined(CONFIG_IMQ_MODULE)
 	skb_copy_stored_cb(new, old);
 #endif
 	new->csum		= old->csum;
 	new->local_df		= old->local_df;
 	new->pkt_type		= old->pkt_type;
 	new->ip_summed		= old->ip_summed;
