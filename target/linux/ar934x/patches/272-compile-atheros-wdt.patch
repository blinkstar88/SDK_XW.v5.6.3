--- a/arch/mips/atheros/934x.c
+++ b/arch/mips/atheros/934x.c
@@ -331,26 +331,28 @@ static struct platform_device *ath_platf
 	&ath_pci_ep_device
 };
 
 extern void ath_serial_setup(void);
 extern void ath_set_wd_timer(uint32_t usec /* micro seconds */);
 extern int ath_set_wd_timer_action(uint32_t val);
 
+#if 0 /* UBNT: we are using own wathcdog*/
 void
 ath_aphang_timer_fn(void)
 {
 	static int times;
 	if (times == 0) {
 		ath_set_wd_timer_action(ATH_WD_ACT_NONE);
 		ath_set_wd_timer(2 * USEC_PER_SEC);
 		ath_set_wd_timer_action(ATH_WD_ACT_RESET);
 		//printk(".");
 	}
 	times = (times + 1) % HZ;
 }
+#endif
 
 void
 ath_aphang_timer_init(void)
 {
 	ath_set_wd_timer_action(ATH_WD_ACT_NONE);
 }
 
@@ -366,15 +368,17 @@ int ath_platform_init(void)
 				ARRAY_SIZE(ath_platform_devices));
 
 	if (ret < 0) {
 		printk("%s: failed %d\n", __func__, ret);
 		return ret;
 	}
 
+#if 0 /* UBNT: we are using own wathcdog*/ 
 	if (!is_ar934x_10()) {
 		ath_aphang_timer_init();
 	}
+#endif
 
 	return 0;
 }
 
 arch_initcall(ath_platform_init);
--- a/arch/mips/atheros/wdt.c
+++ b/arch/mips/atheros/wdt.c
@@ -16,17 +16,21 @@
 #include <linux/miscdevice.h>
 
 #include <asm/mach-atheros/atheros.h>
 #include <asm/delay.h>
 
 #define ATH_DEFAULT_WD_TMO	(20ul * USEC_PER_SEC)
 
+//UBNT: Do not use GPIO RESET via WDT
+#undef WDT_GPIO_RESET
+#ifdef WDT_GPIO_RESET
 #define FACTORY_RESET		0x89ABCDEF
 
 #define ATH_GPIO_RESET	21
+#endif
 
 #ifdef ATH_WDT_TEST_CODE
 #	define wddbg printk
 #else
 #	define wddbg(junk, ...)
 #endif /* ATH_WDT_TEST_CODE 8 */
 
@@ -37,15 +41,17 @@ typedef struct {
 	wait_queue_head_t wq;
 } ath_wdt_t;
 
 static ath_wdt_t wdt_softc_array;
 
 static ath_wdt_t *wdt = &wdt_softc_array;
 
+#ifdef WDT_GPIO_RESET
 irqreturn_t ath_wdt_isr(int, void *);
+#endif
 
 #ifdef ATH_WDT_TEST_CODE
 /* Return the value present in the watchdog register */
 static inline uint32_t ath_get_wd_timer(void)
 {
 	uint32_t val;
 
@@ -99,14 +105,15 @@ static inline uint32_t ath_get_wd_timer_
 static inline uint32_t ath_get_wd_timer_last(void)
 {
 	return ((uint32_t) (ath_reg_rd(ATH_WATCHDOG_TMR_CONTROL) &
 			    ATH_WD_LAST_MASK) >> ATH_WD_LAST_SHIFT);
 }
 #endif /* ATH_WDT_TEST_CODE */
 
+#ifdef WDT_GPIO_RESET
 irqreturn_t ath_wdt_isr(int cpl, void *dev_id)
 {
 	unsigned delay;
 	extern int ath_gpio_in_val(int);
 
 #define UDELAY_COUNT 4000
 
@@ -125,14 +132,15 @@ irqreturn_t ath_wdt_isr(int cpl, void *d
 		wake_up(&wdt->wq);
 	} else {
 		extern void ath_restart(char *);
 		ath_restart(NULL);
 	}
 	return IRQ_HANDLED;
 }
+#endif
 
 static int athwdt_open(struct inode *inode, struct file *file)
 {
 	wddbg("%s: called\n", __func__);
 
 	if (MINOR(inode->i_rdev) != WATCHDOG_MINOR) {
 		return -ENODEV;
@@ -145,28 +153,28 @@ static int athwdt_open(struct inode *ino
 	wdt->open = 1;
 	wdt->tmo = ATH_DEFAULT_WD_TMO;
 	wdt->action = ATH_WD_ACT_NONE;
 	wdt->can_close = 0;
 	init_waitqueue_head(&wdt->wq);
 
 	ath_set_wd_timer(wdt->tmo);
-	ath_set_wd_timer_action(ATH_WD_ACT_NONE);
+	ath_set_wd_timer_action(ATH_WD_ACT_RESET);
 
 	return nonseekable_open(inode, file);
 }
 
 static int athwdt_close(struct inode *inode, struct file *file)
 {
 	wddbg("%s: called\n", __func__);
 
 	if (MINOR(inode->i_rdev) != WATCHDOG_MINOR) {
 		return -ENODEV;
 	}
 
-	if (!wdt->can_close) {
+	if (wdt->can_close) {
 		wddbg("%s: clearing action\n", __func__);
 		ath_set_wd_timer_action(ATH_WD_ACT_NONE);
 	} else {
 		wddbg("%s: not clearing action\n", __func__);
 	}
 	wdt->open = 0;
 	return 0;
@@ -185,29 +193,30 @@ athwdt_ioctl(struct inode *inode, struct
 		unsigned long arg)
 {
 	int ret = 0;
 
 	wddbg("%s: called\n", __func__);
 
 	switch (cmd) {
-	case FACTORY_RESET:
+#ifdef WDT_GPIO_RESET
+        case FACTORY_RESET:
 		wddbg("%s: intr action\n", __func__);
 
 		if ((ret = request_irq(ATH_MISC_IRQ_WATCHDOG,
 				       ath_wdt_isr,
 				       0, "Watchdog Timer", wdt))) {
 			wddbg("%s: request_irq %d\n", __func__, ret);
 			return ret;
 		}
 
 		ath_set_wd_timer_action(ATH_WD_ACT_GP_INTR);
 		sleep_on(&wdt->wq);
 		free_irq(ATH_MISC_IRQ_WATCHDOG, wdt);
 		break;
-
+#endif
 	default:
 		ret = -EINVAL;
 	}
 
 	return ret;
 }
 
@@ -260,14 +269,14 @@ int __init athwdt_init(void)
 	printk("%s: Registering WDT ", __func__);
 	if ((ret = misc_register(&athwdt_miscdev))) {
 		printk("failed %d\n", ret);
 		return ret;
 	} else {
 		printk("success\n");
 	}
-
+#ifdef WDT_GPIO_RESET
 	ath_gpio_config_input(ATH_GPIO_RESET);
-
+#endif
 	return 0;
 }
 
 late_initcall(athwdt_init);
