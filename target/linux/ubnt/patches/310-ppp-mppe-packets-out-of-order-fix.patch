Index: linux-2.6.32.29/drivers/net/ppp_generic.c
===================================================================
--- linux-2.6.32.29.orig/drivers/net/ppp_generic.c	2011-04-11 17:39:51.682731186 +0300
+++ linux-2.6.32.29/drivers/net/ppp_generic.c	2011-04-12 11:27:31.333100736 +0300
@@ -135,6 +135,7 @@
 	struct sock_filter *active_filter;/* filter for pkts to reset idle */
 	unsigned pass_len, active_len;
 #endif /* CONFIG_PPP_FILTER */
+	struct sk_buff	*oo_rx_buf;	/* receved out of order packet buffer */
 	struct net	*ppp_net;	/* the net we belong to */
 };
 
@@ -1214,6 +1215,19 @@
 	case PPP_CCP:
 		/* peek at outbound CCP frames */
 		ppp_ccp_peek(ppp, skb, 0);
+		/*
+		 * When MPPE has been negotiated we don't send
+		 * CCP_RESETACK after receiving CCP_RESETREQ; in fact pppd
+		 * sends such a packet but we silently discard it here
+		 */
+		if (CCP_CODE(skb->data+2) == CCP_RESETACK
+			&& (ppp->xcomp->compress_proto == CI_MPPE))
+		{
+			--ppp->dev->stats.tx_packets;
+			ppp->dev->stats.tx_bytes -= skb->len - 2;
+			kfree_skb(skb);
+			return;
+		}
 		break;
 	}
 
@@ -1664,16 +1678,26 @@
 {
 	struct sk_buff *ns;
 	int proto, len, npi;
+	int retry;
 
 	/*
 	 * Decompress the frame, if compressed.
 	 * Note that some decompressors need to see uncompressed frames
 	 * that come in as well as compressed frames.
 	 */
+	skb->priority = 0; /* misuse skb priority for repeat indication */
+repeat:
 	if (ppp->rc_state && (ppp->rstate & SC_DECOMP_RUN)
 	    && (ppp->rstate & (SC_DC_FERROR | SC_DC_ERROR)) == 0)
 		skb = ppp_decompress_frame(ppp, skb);
 
+	if (!skb)
+	{
+		return;
+	}
+	retry = skb->priority;
+	skb->priority = 0;
+
 	if (ppp->flags & SC_MUST_COMP && ppp->rstate & SC_DC_FERROR)
 		goto err;
 
@@ -1791,26 +1815,43 @@
 			netif_rx(skb);
 		}
 	}
+	if (retry)
+	{
+		skb = NULL;
+		goto repeat;
+	}
 	return;
 
  err:
 	kfree_skb(skb);
 	ppp_receive_error(ppp);
+	if (retry)
+	{
+		skb = NULL;
+		goto repeat;
+	}
 }
 
 static struct sk_buff *
 ppp_decompress_frame(struct ppp *ppp, struct sk_buff *skb)
 {
-	int proto = PPP_PROTO(skb);
+	int proto;
 	struct sk_buff *ns;
 	int len;
 
+	if (skb == NULL)
+	{
+		skb = ppp->oo_rx_buf;
+		ppp->oo_rx_buf = NULL;
+	}
+
 	/* Until we fix all the decompressor's need to make sure
 	 * data portion is linear.
 	 */
 	if (!pskb_may_pull(skb, skb->len))
 		goto err;
 
+	proto = PPP_PROTO(skb);
 	if (proto == PPP_COMP) {
 		int obuff_size;
 
@@ -1828,15 +1869,48 @@
 			printk(KERN_ERR "ppp_decompress_frame: no memory\n");
 			goto err;
 		}
+repeat:
 		/* the decompressor still expects the A/C bytes in the hdr */
 		len = ppp->rcomp->decompress(ppp->rc_state, skb->data - 2,
 				skb->len + 2, ns->data, obuff_size);
 		if (len < 0) {
 			/* Pass the compressed frame to pppd as an
 			   error indication. */
-			if (len == DECOMP_FATALERROR)
-				ppp->rstate |= SC_DC_FERROR;
+			if (len == DECOMP_DROP)
+			{
+				dev_kfree_skb(skb);
+				skb = NULL;
+			}
+			else if (len == DECOMP_ORDER)
+			{
+				if (ppp->oo_rx_buf)
+				{
+					dev_kfree_skb(ppp->oo_rx_buf);
+				}
+				ppp->oo_rx_buf = skb;
+				skb = NULL;
+			}
+			else if (len == DECOMP_REORDER)
+			{
+				struct sk_buff *tskb = ppp->oo_rx_buf;
+				ppp->oo_rx_buf = skb;
+				skb = tskb;
+				ns->priority = 1; /* misuse for repeating... */
+				goto repeat;
+			}
+			else
+			{
+				if (len == DECOMP_FATALERROR)
+					ppp->rstate |= SC_DC_FERROR;
+				if (ppp->oo_rx_buf)
+				{
+					dev_kfree_skb(ppp->oo_rx_buf);
+					ppp->oo_rx_buf = NULL;
+				}
+			}
 			kfree_skb(ns);
+			if (skb == NULL)
+				return NULL;
 			goto err;
 		}
 
@@ -1856,7 +1930,14 @@
 	return skb;
 
  err:
-	ppp->rstate |= SC_DC_ERROR;
+	if (ppp->rcomp->compress_proto != CI_MPPE)
+	{
+		/*
+		 * If decompression protocol isn't MPPE, we set
+		 * SC_DC_ERROR flag and wait for CCP_RESETACK
+		 */
+		ppp->rstate |= SC_DC_ERROR;
+	}
 	ppp_receive_error(ppp);
 	return skb;
 }
@@ -2379,6 +2460,11 @@
 		if (inbound) {
 			if (ppp->rc_state && (ppp->rstate & SC_DECOMP_RUN)) {
 				ppp->rcomp->decomp_reset(ppp->rc_state);
+				if (ppp->oo_rx_buf)
+				{
+					dev_kfree_skb(ppp->oo_rx_buf);
+					ppp->oo_rx_buf = NULL;
+				}
 				ppp->rstate &= ~SC_DC_ERROR;
 			}
 		} else {
@@ -2696,6 +2782,11 @@
 	kfree(ppp->active_filter);
 	ppp->active_filter = NULL;
 #endif /* CONFIG_PPP_FILTER */
+	if (ppp->oo_rx_buf)
+	{
+		dev_kfree_skb(ppp->oo_rx_buf);
+		ppp->oo_rx_buf = NULL;
+	}
 
 	kfree_skb(ppp->xmit_pending);
 
Index: linux-2.6.32.29/drivers/net/ppp_mppe.c
===================================================================
--- linux-2.6.32.29.orig/drivers/net/ppp_mppe.c	2011-04-11 17:39:51.682731186 +0300
+++ linux-2.6.32.29/drivers/net/ppp_mppe.c	2011-04-11 17:39:55.822731245 +0300
@@ -105,6 +105,7 @@
 	/* the unit has to change to bits  */
 	unsigned char bits;	/* MPPE control bits */
 	unsigned ccount;	/* 12-bit coherency count (seqno)  */
+	unsigned oo_ccount;	/* last out of order 12-bit coherency count (seqno)  */
 	unsigned stateful;	/* stateful mode flag */
 	int discard;		/* stateful mode packet loss flag */
 	int sanity_errors;	/* take down LCP if too many */
@@ -321,6 +322,9 @@
 	 * do the right thing (determined through experiment).
 	 */
 	state->ccount = MPPE_CCOUNT_SPACE - 1;
+	/* This is value means that oo_ccount is not set - actually it is used only
+	 * for decompressing */
+	state->oo_ccount = MPPE_CCOUNT_SPACE;
 
 	/*
 	 * Note that even though we have initialized the key table, we don't
@@ -465,6 +469,9 @@
  */
 static void mppe_decomp_reset(void *arg)
 {
+	struct ppp_mppe_state *state = (struct ppp_mppe_state *) arg;
+	/* reset oo_ccount */
+	state->oo_ccount = MPPE_CCOUNT_SPACE;
 	/* ARGSUSED */
 	return;
 }
@@ -543,11 +550,38 @@
 			return DECOMP_FATALERROR;
 	}
 
+#define CCOUNT_DIFF(_new, _old) \
+	((unsigned)(_new) - (((unsigned)(_old)) % MPPE_CCOUNT_SPACE)) \
+				% MPPE_CCOUNT_SPACE
+#define CCOUNT_BEFORE(_new, _old) \
+	(CCOUNT_DIFF((_new),(_old)) >= (MPPE_CCOUNT_SPACE >> 1))
 	/*
 	 * Check the coherency count.
 	 */
-
 	if (!state->stateful) {
+		int gap = CCOUNT_DIFF(ccount, state->ccount + 1);
+		/* detect past missed ccount */
+		if (CCOUNT_BEFORE(ccount, state->ccount + 1))
+			return DECOMP_DROP;
+		/* has oo_ccount set and packet arrived should go after oo_count */
+		if (state->oo_ccount < MPPE_CCOUNT_SPACE
+				&& !CCOUNT_BEFORE(ccount, state->oo_ccount + 1))
+		{
+			/* we need state->ccount(and key) to be just 1 step behind */
+			state->oo_ccount = (state->oo_ccount - 1) % MPPE_CCOUNT_SPACE;
+			while (state->ccount != state->oo_ccount)
+			{
+				mppe_rekey(state, 0);
+				state->ccount = (state->ccount + 1) % MPPE_CCOUNT_SPACE;
+			}
+			state->oo_ccount = MPPE_CCOUNT_SPACE;
+			return DECOMP_REORDER;
+		}
+		if (gap > 0)
+		{
+			state->oo_ccount = ccount;
+			return DECOMP_ORDER;
+		}
 		/* RFC 3078, sec 8.1.  Rekey for every packet. */
 		while (state->ccount != ccount) {
 			mppe_rekey(state, 0);
Index: linux-2.6.32.29/include/linux/ppp-comp.h
===================================================================
--- linux-2.6.32.29.orig/include/linux/ppp-comp.h	2011-04-11 17:39:51.682731186 +0300
+++ linux-2.6.32.29/include/linux/ppp-comp.h	2011-04-11 17:39:55.822731245 +0300
@@ -127,6 +127,11 @@
 
 #define DECOMP_ERROR		-1	/* error detected before decomp. */
 #define DECOMP_FATALERROR	-2	/* error detected after decomp. */
+#define DECOMP_ORDER		-3	/* detected out of order. */
+#define DECOMP_REORDER		-4	/* request to repeat previuos out of order
+								   packet. You can repeat the same if previous
+								   out of order packet is already lost */
+#define DECOMP_DROP			-5	/* decompressor decided to drop that frame. */
 
 /*
  * CCP codes.
