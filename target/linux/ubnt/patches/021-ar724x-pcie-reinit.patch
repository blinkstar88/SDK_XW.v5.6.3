--- a/arch/mips//include/asm/mach-ar7240/ar7240.h
+++ b/arch/mips/include/asm/mach-ar7240/ar7240.h
@@ -151,6 +151,7 @@
 #define AR7240_DDR_CLK_CTRL		AR7240_PLL_BASE+0x8
 #else
 #define AR7240_ETH_PLL_CONFIG		AR7240_PLL_BASE+0x4
+#define AR7240_PCIE_PLL_CONFIG          AR7240_PLL_BASE+0x10
 #endif
 #define AR7242_ETH_XMII_CONFIG		AR7240_PLL_BASE+0x2c
 #define AR7240_AUDIO_PLL_CONFIG		AR7240_PLL_BASE+0x30
@@ -1081,6 +1082,8 @@
 #define AR7240_RESET_PCIE_PHY_SHIFT		(1 << 10)
 #define AR7240_RESET_GE0_MAC			(1 << 9)
 #define AR7240_RESET_GE0_PHY			(1 << 8)
+#define AR7240_RESET_PCIE_PHY               (1 << 7)
+#define AR7240_RESET_PCIE                   (1 << 6)
 #define AR7240_RESET_USBSUS_OVRIDE		(1 << 3)
 #define AR7240_RESET_USB_OHCI_DLL		(1 << 3)
 #define AR7240_RESET_USB_HOST			(1 << 5)
Index: ../files/target/linux/ubnt/files/arch/mips/pci/pci-ar7240.c
===================================================================
--- a/arch/mips/pci/pci-ar7240.c
+++ b/arch/mips/pci/pci-ar7240.c
@@ -209,6 +209,56 @@
     return IRQ_HANDLED;
 }
 
+static int ar7240_pci_reinit(void)
+{
+	uint32_t cmd;
+	/*
+	 * Initialize PCIE PLL and get it out of RESET
+	 */
+	ar7240_reg_wr(AR7240_PCIE_PLL_CONFIG,0x02050800);
+
+	ar7240_reg_wr(AR7240_PCIE_PLL_CONFIG,0x00050800);
+	udelay(100);
+
+	ar7240_reg_wr(AR7240_PCIE_PLL_CONFIG,0x00040800);
+	udelay(100);
+
+	ar7240_reg_rmw_clear(AR7240_RESET,AR7240_RESET_PCIE_PHY_SHIFT);
+	udelay(100);
+
+	ar7240_reg_rmw_clear(AR7240_RESET,AR7240_RESET_PCIE_PHY);
+
+
+	ar7240_reg_rmw_clear(AR7240_RESET,AR7240_RESET_PCIE);
+
+	cmd = PCI_COMMAND_MEMORY | PCI_COMMAND_MASTER | PCI_COMMAND_INVALIDATE |
+	    PCI_COMMAND_PARITY|PCI_COMMAND_SERR|PCI_COMMAND_FAST_BACK;
+
+	ar7240_local_write_config(PCI_COMMAND, 4, cmd);
+	ar7240_local_write_config(0x20, 4, 0x1ff01000);
+	ar7240_local_write_config(0x24, 4, 0x1ff01000);
+
+	if (ar7240_reg_rd(AR7240_PCI_LCL_RESET) != 0x7) {
+	    udelay(100000);
+	    ar7240_reg_wr_nf(AR7240_PCI_LCL_RESET, 0);
+	    udelay(100);
+	    ar7240_reg_wr_nf(AR7240_PCI_LCL_RESET, 4);
+	    udelay(100000);
+	}
+
+	if ((is_ar7241() || is_ar7242())) {
+	    ar7240_reg_wr(0x180f0000, 0x1ffc1);
+	}
+	else {
+	    ar7240_reg_wr(0x180f0000, 0x1);
+	}
+	/*
+	 *  Delay increased from 100 to 1000, so as to
+	 *  get the correct status from PCI LCL RESET register
+	 */
+	udelay(10000);
+        return 0;
+}
 /*
  * We want a 1:1 mapping between PCI and DDR for inbound and outbound.
  * The PCI<---AHB decoding works as follows:
@@ -243,22 +293,35 @@
 static int __init ar7240_pcibios_init(void)
 {
 	uint32_t cmd;
+#define PCIE_REINIT_COUNT 10
+       int8_t count = PCIE_REINIT_COUNT;
 
 #ifdef CONFIG_WASP_SUPPORT
 	if (is_ar9341()) {
 		return 0;
 	}
 #endif
-	/*
-	 * Check if the WLAN PCI-E H/W is present, If the
-	 * WLAN H/W is not present, skip the PCI
-	 * initialization code and just return.
-	 */
+	while(count--) {
+	    /*
+	     * Check if the WLAN PCI-E H/W is present, If the
+	     * WLAN H/W is not present, skip the PCI
+	     * initialization code and just return.
+	     */
 
-	if (((ar7240_reg_rd(AR7240_PCI_LCL_RESET)) & 0x1) == 0x0) {
-		printk("***** Warning *****: PCIe WLAN H/W not found !!!\n");
-		return 0;
+	    if (((ar7240_reg_rd(AR7240_PCI_LCL_RESET)) & 0x1) == 0x0) {
+                ar7240_pci_reinit();
+                continue;
+	    } else {
+                break;
+	    }
 	}
+	if (count < 0) {
+	    printk("***** Warning *****: PCIe WLAN H/W not found !!!\n");
+	    return 0;
+	} else {
+	    printk("PCIe WLAN H/W found [tries: %d]\n", PCIE_REINIT_COUNT - count);
+	}
+
         if ((is_ar7241() || is_ar7242()))
 		ar7240_reg_wr(AR7240_PCI_LCL_APP, (ar7240_reg_rd(AR7240_PCI_LCL_APP) | (0x1 << 16)));
 
